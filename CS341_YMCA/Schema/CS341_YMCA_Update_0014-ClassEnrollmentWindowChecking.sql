/*
Deployment script for CS341_YMCA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CS341_YMCA"
:setvar DefaultFilePrefix "CS341_YMCA"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Procedure [dbo].[Class_GetById]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided ID
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetById]
	-- Add the parameters for the stored procedure here
	@Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [MemberEnrollmentStart] IS NOT NULL
			AND [MemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [MemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [MemberEnrollmentDays], [MemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [MemberEnrollmentOpen],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [NonMemberEnrollmentStart] IS NOT NULL
			AND [NonMemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [NonMemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [NonMemberEnrollmentDays], [NonMemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [NonMemberEnrollmentOpen]
	FROM [ClassMain]
	WHERE
		[Id] = @Id;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_GetByIds]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided IDs
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetByIds]
	-- Add the parameters for the stored procedure here
	@Csv NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [MemberEnrollmentStart] IS NOT NULL
			AND [MemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [MemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [MemberEnrollmentDays], [MemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [MemberEnrollmentOpen],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [NonMemberEnrollmentStart] IS NOT NULL
			AND [NonMemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [NonMemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [NonMemberEnrollmentDays], [NonMemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [NonMemberEnrollmentOpen]
	FROM [ClassMain]
	WHERE
		[Id] IN (SELECT [ID] FROM [dbo].[SplitID](@Csv, ','))
		;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_List]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Lists all courses meeting certain criteria
-- =============================================
ALTER PROCEDURE [dbo].[Class_List]
	-- Add the parameters for the stored procedure here
	@NameFilter NVARCHAR(100) = '',
	@IncludeDisabled BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [MemberEnrollmentStart] IS NOT NULL
			AND [MemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [MemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [MemberEnrollmentDays], [MemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [MemberEnrollmentOpen],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [NonMemberEnrollmentStart] IS NOT NULL
			AND [NonMemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [NonMemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [NonMemberEnrollmentDays], [NonMemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [NonMemberEnrollmentOpen]
	FROM [ClassMain]
	WHERE
		([Enabled] = 1 OR @IncludeDisabled = 1)
		AND [ClassName] LIKE '%' + @NameFilter + '%'
	ORDER BY [Id];

	END
GO
PRINT N'Update complete.';


GO
