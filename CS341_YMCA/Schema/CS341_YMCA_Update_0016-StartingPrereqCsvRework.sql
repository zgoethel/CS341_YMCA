/*
Deployment script for CS341_YMCA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CS341_YMCA"
:setvar DefaultFilePrefix "CS341_YMCA"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[ClassMain].[PrereqIds] is being dropped, data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[ClassMain])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering Table [dbo].[ClassMain]...';


GO
ALTER TABLE [dbo].[ClassMain] DROP COLUMN [PrereqIds];


GO
ALTER TABLE [dbo].[ClassMain]
    ADD [FulfillCsv] NVARCHAR (MAX) CONSTRAINT [DF_ClassMain_FulfillCsv] DEFAULT ('') NOT NULL,
        [RequireCsv] NVARCHAR (MAX) CONSTRAINT [DF_ClassMain_RequireCsv] DEFAULT ('') NOT NULL;


GO
PRINT N'Altering Table [dbo].[SiteUser]...';


GO
ALTER TABLE [dbo].[SiteUser]
    ADD [FulfilledCsv] NVARCHAR (MAX) CONSTRAINT [DF_SiteUser_FulfilledCsv] DEFAULT ('') NOT NULL;


GO
PRINT N'Altering Procedure [dbo].[Class_DeleteById]...';


GO
ALTER PROCEDURE [dbo].[Class_DeleteById]
	-- Add the parameters for the stored procedure here
	@Id INT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;


    -- Insert statements for procedure here
	DELETE FROM [ClassMain]
	WHERE
		[Id] = @Id;
	-- NOTE
	--
	-- You can use this `DELETE` query to flush out schedules not linked
	-- to a class (e.g., in case a class was deleted manually via SQL).
	--
	-- DELETE FROM [ClassSchedule] WHERE [ClassId] NOT IN (SELECT [Id] FROM [ClassMain] WHERE [Id] = [ClassId]);
	DELETE FROM [ClassSchedule]
	WHERE
		[ClassId] = @Id;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_GetById]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided ID
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetById]
	-- Add the parameters for the stored procedure here
	@Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats],
		[FulfillCsv],
		[RequireCsv],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [MemberEnrollmentStart] IS NOT NULL
			AND [MemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [MemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [MemberEnrollmentDays], [MemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [MemberEnrollmentOpen],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [NonMemberEnrollmentStart] IS NOT NULL
			AND [NonMemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [NonMemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [NonMemberEnrollmentDays], [NonMemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [NonMemberEnrollmentOpen]
	FROM [ClassMain]
	WHERE
		[Id] = @Id;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_GetByIds]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided IDs
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetByIds]
	-- Add the parameters for the stored procedure here
	@Csv NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats],
		[FulfillCsv],
		[RequireCsv],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [MemberEnrollmentStart] IS NOT NULL
			AND [MemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [MemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [MemberEnrollmentDays], [MemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [MemberEnrollmentOpen],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [NonMemberEnrollmentStart] IS NOT NULL
			AND [NonMemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [NonMemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [NonMemberEnrollmentDays], [NonMemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [NonMemberEnrollmentOpen]
	FROM [ClassMain]
	WHERE
		[Id] IN (SELECT [ID] FROM [dbo].[SplitID](@Csv, ','))
		;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_List]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Lists all courses meeting certain criteria
-- =============================================
ALTER PROCEDURE [dbo].[Class_List]
	-- Add the parameters for the stored procedure here
	@NameFilter NVARCHAR(100) = '',
	@IncludeDisabled BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats],
		[FulfillCsv],
		[RequireCsv],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [MemberEnrollmentStart] IS NOT NULL
			AND [MemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [MemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [MemberEnrollmentDays], [MemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [MemberEnrollmentOpen],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [NonMemberEnrollmentStart] IS NOT NULL
			AND [NonMemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [NonMemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [NonMemberEnrollmentDays], [NonMemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [NonMemberEnrollmentOpen]
	FROM [ClassMain]
	WHERE
		([Enabled] = 1 OR @IncludeDisabled = 1)
		AND [ClassName] LIKE '%' + @NameFilter + '%'
	ORDER BY [Id];

	END
GO
PRINT N'Altering Procedure [dbo].[Class_Set]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Saves the main details of the course
-- =============================================
ALTER PROCEDURE [dbo].[Class_Set] 
	-- Add the parameters for the stored procedure here
	@Id INT = NULL,
	@ClassName NVARCHAR(100) = NULL,
	@AllowEnrollment BIT = NULL,
	@Enabled BIT = NULL,
	@ShortDescription NVARCHAR(MAX) = NULL,
	@LongDescription NVARCHAR(MAX) = NULL,
	@MemberEnrollmentStart DATETIME = NULL,
	@MemberEnrollmentDays INT = NULL,
	@NonMemberEnrollmentStart DATETIME = NULL,
	@NonMemberEnrollmentDays INT = NULL,
	@AllowNonMembers BIT = NULL,
	@MemberPrice FLOAT = NULL,
	@NonMemberPrice FLOAT = NULL,
	@Location NVARCHAR(100) = NULL,
	@MaxSeats INT = NULL,
	@FulfillCsv NVARCHAR(MAX) = NULL,
	@RequireCsv NVARCHAR(MAX) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF ISNULL(@Id, 0) = 0
	BEGIN
		-- Create the new record
		INSERT INTO [ClassMain]
		(
			[ClassName],
			[AllowEnrollment],
			[Enabled],
			[ShortDescription],
			[LongDescription],
			[MemberEnrollmentStart],
			[MemberEnrollmentDays],
			[NonMemberEnrollmentStart],
			[NonMemberEnrollmentDays],
			[AllowNonMembers],
			[MemberPrice],
			[NonMemberPrice],
			[Location],
			[MaxSeats],
			[FulfillCsv],
			[RequireCsv]
		) VALUES
		(
			ISNULL(@ClassName, ''),
			ISNULL(@AllowEnrollment, 1),
			ISNULL(@Enabled, 1),
			ISNULL(@ShortDescription, ''),
			ISNULL(@LongDescription, ''),
			@MemberEnrollmentStart,
			ISNULL(@MemberEnrollmentDays, 7),
			@NonMemberEnrollmentStart,
			ISNULL(@NonMemberEnrollmentDays, 7),
			ISNULL(@AllowNonMembers, 0),
			ISNULL(@MemberPrice, 0),
			ISNULL(@NonMemberPrice, 0),
			ISNULL(@Location, ''),
			@MaxSeats,
			ISNULL(@FulfillCsv, ''),
			ISNULL(@RequireCsv, '')
		);
		-- Return the new ID
		SELECT CAST(SCOPE_IDENTITY() AS INT) AS [Id];
	END
	ELSE
	BEGIN
		-- Update the existing record
		UPDATE [ClassMain]
		SET
			[ClassName] = ISNULL(@ClassName, [ClassName]),
			[AllowEnrollment] = ISNULL(@AllowEnrollment, [AllowEnrollment]),
			[Enabled] = ISNULL(@Enabled, [Enabled]),
			[Updated] = GETDATE(),
			[ShortDescription] = ISNULL(@ShortDescription, [ShortDescription]),
			[LongDescription] = ISNULL(@LongDescription, [LongDescription]),
			[MemberEnrollmentStart] = ISNULL(@MemberEnrollmentStart, [MemberEnrollmentStart]),
			[MemberEnrollmentDays] = ISNULL(@MemberEnrollmentDays, [MemberEnrollmentDays]),
			[NonMemberEnrollmentStart] = ISNULL(@NonMemberEnrollmentStart, [NonMemberEnrollmentStart]),
			[NonMemberEnrollmentDays] = ISNULL(@NonMemberEnrollmentDays, [NonMemberEnrollmentDays]),
			[AllowNonMembers] = ISNULL(@AllowNonMembers, [AllowNonMembers]),
			[MemberPrice] = ISNULL(@MemberPrice, [MemberPrice]),
			[NonMemberPrice] = ISNULL(@NonMemberPrice, [NonMemberPrice]),
			[Location] = ISNULL(@Location, [Location]),
			[MaxSeats] = ISNULL(@MaxSeats, [MaxSeats]),
			[FulfillCsv] = ISNULL(@FulfillCsv, [FulfillCsv]),
			[RequireCsv] = ISNULL(@RequireCsv, [RequireCsv])
		WHERE
			[Id] = @Id;
		-- Return the same ID
		SELECT @Id AS [Id];
	END
END
GO
PRINT N'Creating Procedure [dbo].[Class_ListReqs]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 28, 2022
-- Description:	Finds distinct prereq entries in all "requires" and "fulfills"
-- =============================================
CREATE PROCEDURE Class_ListReqs
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Make one long CSV with all the CSVs
	DECLARE @AllValuesCsv NVARCHAR(MAX);
	SELECT @AllValuesCsv = STRING_AGG([RequireCsv] + ',' + [FulfillCsv], ',')
	FROM [ClassMain];

	-- Split it out and select distinct values
	SELECT DISTINCT [Value]
	FROM dbo.Split(@AllValuesCsv, ',')
	WHERE ISNULL([Value], '') != ''
	ORDER BY [Value];
END
GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_Authenticate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_Authenticate]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_DeleteById]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_DeleteById]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_GetByEmail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_GetByEmail]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_GetById]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_GetById]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_List]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_List]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_Register]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_Register]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_RequestReset]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_RequestReset]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_ResetPassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_ResetPassword]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_Set]';


GO
PRINT N'Update complete.';


GO
