/*
Deployment script for CS341_YMCA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CS341_YMCA"
:setvar DefaultFilePrefix "CS341_YMCA"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[ClassSchedule].[Occurrences] on table [dbo].[ClassSchedule] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[ClassSchedule])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Altering Table [dbo].[ClassMain]...';


GO
ALTER TABLE [dbo].[ClassMain]
    ADD [Location] NVARCHAR (100) NULL,
        [MaxSeats] INT            NULL;


GO
PRINT N'Altering Table [dbo].[ClassSchedule]...';


GO
ALTER TABLE [dbo].[ClassSchedule]
    ADD [Occurrences] INT NOT NULL;


GO
PRINT N'Altering Procedure [dbo].[Class_GetById]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided ID
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetById]
	-- Add the parameters for the stored procedure here
	@Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats]
	FROM [ClassMain]
	WHERE
		[Id] = @Id;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_GetByIds]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided IDs
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetByIds]
	-- Add the parameters for the stored procedure here
	@Csv NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats]
	FROM [ClassMain]
	WHERE
		[Id] IN (SELECT [ID] FROM [dbo].[SplitID](@Csv, ','))
		;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_List]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Lists all courses meeting certain criteria
-- =============================================
ALTER PROCEDURE [dbo].[Class_List]
	-- Add the parameters for the stored procedure here
	@NameFilter NVARCHAR(100) = '',
	@IncludeDisabled BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats]
	FROM [ClassMain]
	WHERE
		([Enabled] = 1 OR @IncludeDisabled = 1)
		AND [ClassName] LIKE '%' + @NameFilter + '%'
	ORDER BY [Id];

	END
GO
PRINT N'Altering Procedure [dbo].[Class_Set]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Saves the main details of the course
-- =============================================
ALTER PROCEDURE [dbo].[Class_Set] 
	-- Add the parameters for the stored procedure here
	@Id INT = NULL,
	@ClassName NVARCHAR(100) = NULL,
	@AllowEnrollment BIT = NULL,
	@Enabled BIT = NULL,
	@ShortDescription NVARCHAR(MAX) = NULL,
	@LongDescription NVARCHAR(MAX) = NULL,
	@PrereqIds NVARCHAR(MAX) = NULL,
	@MemberEnrollmentStart DATETIME = NULL,
	@MemberEnrollmentDays INT = NULL,
	@NonMemberEnrollmentStart DATETIME = NULL,
	@NonMemberEnrollmentDays INT = NULL,
	@AllowNonMembers BIT = NULL,
	@MemberPrice FLOAT = NULL,
	@NonMemberPrice FLOAT = NULL,
	@Location NVARCHAR(100) = NULL,
	@MaxSeats INT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF @Id IS NULL
	BEGIN
		-- Create the new record
		INSERT INTO [ClassMain]
		(
			[ClassName],
			[AllowEnrollment],
			[Enabled],
			[ShortDescription],
			[LongDescription],
			[PrereqIds],
			[MemberEnrollmentStart],
			[MemberEnrollmentDays],
			[NonMemberEnrollmentStart],
			[NonMemberEnrollmentDays],
			[AllowNonMembers],
			[MemberPrice],
			[NonMemberPrice],
			[Location],
			[MaxSeats]
		) VALUES
		(
			ISNULL(@ClassName, ''),
			ISNULL(@AllowEnrollment, 1),
			ISNULL(@Enabled, 1),
			ISNULL(@ShortDescription, ''),
			ISNULL(@LongDescription, ''),
			ISNULL(@PrereqIds, ''),
			@MemberEnrollmentStart,
			ISNULL(@MemberEnrollmentDays, 7),
			@NonMemberEnrollmentStart,
			ISNULL(@NonMemberEnrollmentDays, 7),
			ISNULL(@AllowNonMembers, 0),
			ISNULL(@MemberPrice, 0),
			ISNULL(@NonMemberPrice, 0),
			ISNULL(@Location, ''),
			@MaxSeats
		);
		-- Return the new ID
		SELECT CAST(SCOPE_IDENTITY() AS INT) AS [Id];
	END
	ELSE
	BEGIN
		-- Update the existing record
		UPDATE [ClassMain]
		SET
			[ClassName] = ISNULL(@ClassName, [ClassName]),
			[AllowEnrollment] = ISNULL(@AllowEnrollment, [AllowEnrollment]),
			[Enabled] = ISNULL(@Enabled, [Enabled]),
			[Updated] = GETDATE(),
			[ShortDescription] = ISNULL(@ShortDescription, [ShortDescription]),
			[LongDescription] = ISNULL(@LongDescription, [LongDescription]),
			[PrereqIds] = ISNULL(@PrereqIds, [PrereqIds]),
			[MemberEnrollmentStart] = ISNULL(@MemberEnrollmentStart, [MemberEnrollmentStart]),
			[MemberEnrollmentDays] = ISNULL(@MemberEnrollmentDays, [MemberEnrollmentDays]),
			[NonMemberEnrollmentStart] = ISNULL(@NonMemberEnrollmentStart, [NonMemberEnrollmentStart]),
			[NonMemberEnrollmentDays] = ISNULL(@NonMemberEnrollmentDays, [NonMemberEnrollmentDays]),
			[AllowNonMembers] = ISNULL(@AllowNonMembers, [AllowNonMembers]),
			[MemberPrice] = ISNULL(@MemberPrice, [MemberPrice]),
			[NonMemberPrice] = ISNULL(@NonMemberPrice, [NonMemberPrice]),
			[Location] = ISNULL(@Location, [Location]),
			[MaxSeats] = ISNULL(@MaxSeats, [MaxSeats])
		WHERE
			[Id] = @Id;
		-- Return the same ID
		SELECT @Id AS [Id];
	END
END
GO
PRINT N'Creating Procedure [dbo].[ClassSchedule_List]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 1, 2022
-- Description:	Lists all sessions for a specified class
-- =============================================
CREATE PROCEDURE [dbo].[ClassSchedule_List]
	-- Add the parameters for the stored procedure here
	@ClassId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassId],
		[FirstDate],
		[Recurrence],
		[Duration],
		[Created],
		[Updated],
		[Occurrences]
	FROM [ClassSchedule]
	WHERE
		[ClassId] = @ClassId
	ORDER BY [FirstDate];

	END
GO
PRINT N'Creating Procedure [dbo].[ClassSchedule_Set]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 1, 2022
-- Description:	Saves the details of the course session
-- =============================================
CREATE PROCEDURE [dbo].[ClassSchedule_Set] 
	-- Add the parameters for the stored procedure here
	@Id INT = NULL,
	@ClassId INT = NULL,
	@FirstDate DATETIME = NULL,
	@Recurrence INT = NULL,
	@Duration INT = NULL,
	@Occurrences INT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF @Id IS NULL
	BEGIN
		-- Create the new record
		INSERT INTO [ClassSchedule]
		(
			[ClassId],
			[FirstDate],
			[Recurrence],
			[Duration],
			[Occurrences]
		) VALUES
		(
			@ClassId,
			@FirstDate,
			@Recurrence,
			@Duration,
			@Occurrences
		);
		-- Return the new ID
		SELECT CAST(SCOPE_IDENTITY() AS INT) AS [Id];
	END
	ELSE
	BEGIN
		-- Update the existing record
		UPDATE [ClassSchedule]
		SET
			[ClassId] = ISNULL(@ClassId, [ClassId]),
			[FirstDate] = ISNULL(@FirstDate, [FirstDate]),
			[Recurrence] = ISNULL(@Recurrence, [Recurrence]),
			[Duration] = ISNULL(@Duration, [Duration]),
			[Occurrences] = ISNULL(@Occurrences, [Occurrences])
		WHERE
			[Id] = @Id;
		-- Return the same ID
		SELECT @Id AS [Id];
	END
END
GO
PRINT N'Update complete.';


GO
