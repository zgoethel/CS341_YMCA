/*
Deployment script for CS341_YMCA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CS341_YMCA"
:setvar DefaultFilePrefix "CS341_YMCA"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Table [dbo].[ClassMain]...';


GO
ALTER TABLE [dbo].[ClassMain]
    ADD [ShortDescription] NVARCHAR (MAX) CONSTRAINT [DF_ClassMain_ShortDescription] DEFAULT ('') NOT NULL,
        [LongDescription]  NVARCHAR (MAX) CONSTRAINT [DF_ClassMain_LongDescription] DEFAULT ('') NOT NULL;


GO
PRINT N'Altering Procedure [dbo].[Class_GetById]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided ID
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetById]
	-- Add the parameters for the stored procedure here
	@Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription]
	FROM [ClassMain]
	WHERE
		[Id] = @Id;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_List]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Lists all courses meeting certain criteria
-- =============================================
ALTER PROCEDURE [dbo].[Class_List]
	-- Add the parameters for the stored procedure here
	@NameFilter NVARCHAR(100) = '',
	@IncludeDisabled BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription]
	FROM [ClassMain]
	WHERE
		([Enabled] = 1 OR @IncludeDisabled = 1)
	ORDER BY [Id];

	END
GO
PRINT N'Altering Procedure [dbo].[Class_Set]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Saves the main details of the course
-- =============================================
ALTER PROCEDURE [dbo].[Class_Set] 
	-- Add the parameters for the stored procedure here
	@Id INT = NULL,
	@ClassName NVARCHAR(100) = NULL,
	@AllowEnrollment BIT = NULL,
	@Enabled BIT = NULL,
	@ShortDescription NVARCHAR(MAX) = NULL,
	@LongDescription NVARCHAR(MAX) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF @Id IS NULL
	BEGIN
		-- Create the new record
		INSERT INTO [ClassMain]
		(
			[ClassName],
			[AllowEnrollment],
			[Enabled],
			[ShortDescription],
			[LongDescription]
		) VALUES
		(
			ISNULL(@ClassName, ''),
			ISNULL(@AllowEnrollment, 1),
			ISNULL(@Enabled, 1),
			ISNULL(@ShortDescription, ''),
			ISNULL(@LongDescription, '')
		);
		-- Return the new ID
		SELECT CAST(SCOPE_IDENTITY() AS INT) AS [Id];
	END
	ELSE
	BEGIN
		-- Update the existing record
		UPDATE [ClassMain]
		SET
			[ClassName] = ISNULL(@ClassName, [ClassName]),
			[AllowEnrollment] = ISNULL(@AllowEnrollment, [AllowEnrollment]),
			[Enabled] = ISNULL(@Enabled, [Enabled]),
			[Updated] = GETDATE(),
			[ShortDescription] = ISNULL(@ShortDescription, [ShortDescription]),
			[LongDescription] = ISNULL(@LongDescription, [LongDescription])
		WHERE
			[Id] = @Id;
		-- Return the same ID
		SELECT @Id AS [Id];
	END
END
GO
PRINT N'Update complete.';


GO
