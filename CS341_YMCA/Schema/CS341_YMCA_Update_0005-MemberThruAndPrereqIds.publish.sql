/*
Deployment script for CS341_YMCA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CS341_YMCA"
:setvar DefaultFilePrefix "CS341_YMCA"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
The column [dbo].[ClassSchedule].[SectionId] is being dropped, data loss could occur.

The column [dbo].[ClassSchedule].[ClassId] on table [dbo].[ClassSchedule] must be added, but the column has no default value and does not allow NULL values. If the table contains data, the ALTER script will not work. To avoid this issue you must either: add a default value to the column, mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

IF EXISTS (select top 1 1 from [dbo].[ClassSchedule])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
Table [dbo].[ClassSection] is being dropped.  Deployment will halt if the table contains data.
*/

IF EXISTS (select top 1 1 from [dbo].[ClassSection])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Dropping Default Constraint [dbo].[DF_ClassSchedule_Recurrence]...';


GO
ALTER TABLE [dbo].[ClassSchedule] DROP CONSTRAINT [DF_ClassSchedule_Recurrence];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_ClassSchedule_Duration]...';


GO
ALTER TABLE [dbo].[ClassSchedule] DROP CONSTRAINT [DF_ClassSchedule_Duration];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_ClassSchedule_Created]...';


GO
ALTER TABLE [dbo].[ClassSchedule] DROP CONSTRAINT [DF_ClassSchedule_Created];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_ClassSchedule_Updated]...';


GO
ALTER TABLE [dbo].[ClassSchedule] DROP CONSTRAINT [DF_ClassSchedule_Updated];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_ClassSection_Created]...';


GO
ALTER TABLE [dbo].[ClassSection] DROP CONSTRAINT [DF_ClassSection_Created];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_ClassSection_Updated]...';


GO
ALTER TABLE [dbo].[ClassSection] DROP CONSTRAINT [DF_ClassSection_Updated];


GO
PRINT N'Dropping Table [dbo].[ClassSection]...';


GO
DROP TABLE [dbo].[ClassSection];


GO
PRINT N'Altering Table [dbo].[ClassMain]...';


GO
ALTER TABLE [dbo].[ClassMain]
    ADD [PrereqIds] NVARCHAR (MAX) NULL;


GO
PRINT N'Starting rebuilding table [dbo].[ClassSchedule]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ClassSchedule] (
    [Id]         INT      IDENTITY (1, 1) NOT NULL,
    [ClassId]    INT      NOT NULL,
    [FirstDate]  DATETIME NOT NULL,
    [Recurrence] INT      CONSTRAINT [DF_ClassSchedule_Recurrence] DEFAULT ((7)) NOT NULL,
    [Duration]   INT      CONSTRAINT [DF_ClassSchedule_Duration] DEFAULT ((60)) NOT NULL,
    [Created]    DATETIME CONSTRAINT [DF_ClassSchedule_Created] DEFAULT (getdate()) NOT NULL,
    [Updated]    DATETIME CONSTRAINT [DF_ClassSchedule_Updated] DEFAULT (getdate()) NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_ClassSchedule1] PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ClassSchedule])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ClassSchedule] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ClassSchedule] ([Id], [FirstDate], [Recurrence], [Duration], [Created], [Updated])
        SELECT   [Id],
                 [FirstDate],
                 [Recurrence],
                 [Duration],
                 [Created],
                 [Updated]
        FROM     [dbo].[ClassSchedule]
        ORDER BY [Id] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ClassSchedule] OFF;
    END

DROP TABLE [dbo].[ClassSchedule];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ClassSchedule]', N'ClassSchedule';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_ClassSchedule1]', N'PK_ClassSchedule', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [dbo].[SiteUser]...';


GO
ALTER TABLE [dbo].[SiteUser]
    ADD [MemberThru] DATETIME NULL;


GO
PRINT N'Creating Function [dbo].[Split]...';


GO

/*

	Created by: Jeff

	Purpose:	Split a CSV into individual items based on a param passed in

*/

CREATE FUNCTION [dbo].[Split](
	@List varchar(MAX), 
	@SplitOn varchar(5)
)  
RETURNS @rtnTbl table (value varchar(MAX)) 
AS  
BEGIN
	
	While (Charindex(@SplitOn,@List)>0)
	
	Begin 
		Insert Into @RtnTbl (value)
		Select	Value = ltrim(
					rtrim(
						Substring(@List,1,Charindex(@SplitOn,@List)-1)
					)
				) 
		
		Set @List = Substring(@List,Charindex(@SplitOn,@List)+len(@SplitOn),len(@List))

	End 
	
	Insert Into @RtnTbl (Value)
	
	Select Value = ltrim(rtrim(@List))
	
	return

END
GO
PRINT N'Creating Function [dbo].[SplitID]...';


GO

/*

	Created by: Jeff

	Purpose:	Split a CSV into individual items based on a param passed in

*/
CREATE FUNCTION [dbo].[SplitID] (
	@List nvarchar(MAX), 
	@SplitOn nvarchar(5)
)  
RETURNS @RtnTbl table (ID numeric) 
AS  
BEGIN
	DECLARE @Value nvarchar(100)
	
	WHILE (CHARINDEX(@SplitOn,@List)>0)
	BEGIN 
	
		SELECT @Value = LTRIM(
							RTRIM(
								SUBSTRING(@List,1,CHARINDEX(@SplitOn,@List)-1)
							)
						) 
		
		Set @List = SUBSTRING(@List,CHARINDEX(@SplitOn,@List)+LEN(@SplitOn),LEN(@List))
	
		IF ISNUMERIC(@Value) = 1
		BEGIN
	
			INSERT INTO @RtnTbl (ID) VALUES (CONVERT(numeric,@Value))
	
		END
	END
	
	SELECT @Value = LTRIM(RTRIM(@List))
	
	IF ISNUMERIC(@Value) = 1
	BEGIN
	
		INSERT INTO @RtnTbl (ID) VALUES (CONVERT(numeric,@Value))
	
	END
	
	RETURN
END
GO
PRINT N'Altering Procedure [dbo].[Class_GetById]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 24, 2022
-- Description:	Returns details associated with the provided ID
-- =============================================
ALTER PROCEDURE [dbo].[Class_GetById]
	-- Add the parameters for the stored procedure here
	@Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds]
	FROM [ClassMain]
	WHERE
		[Id] = @Id;

	END
GO
PRINT N'Altering Procedure [dbo].[Class_List]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Lists all courses meeting certain criteria
-- =============================================
ALTER PROCEDURE [dbo].[Class_List]
	-- Add the parameters for the stored procedure here
	@NameFilter NVARCHAR(100) = '',
	@IncludeDisabled BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[PrereqIds]
	FROM [ClassMain]
	WHERE
		([Enabled] = 1 OR @IncludeDisabled = 1)
	ORDER BY [Id];

	END
GO
PRINT N'Altering Procedure [dbo].[Class_Set]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Saves the main details of the course
-- =============================================
ALTER PROCEDURE [dbo].[Class_Set] 
	-- Add the parameters for the stored procedure here
	@Id INT = NULL,
	@ClassName NVARCHAR(100) = NULL,
	@AllowEnrollment BIT = NULL,
	@Enabled BIT = NULL,
	@ShortDescription NVARCHAR(MAX) = NULL,
	@LongDescription NVARCHAR(MAX) = NULL,
	@PrereqIds NVARCHAR(MAX) = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	IF @Id IS NULL
	BEGIN
		-- Create the new record
		INSERT INTO [ClassMain]
		(
			[ClassName],
			[AllowEnrollment],
			[Enabled],
			[ShortDescription],
			[LongDescription],
			[PrereqIds]
		) VALUES
		(
			ISNULL(@ClassName, ''),
			ISNULL(@AllowEnrollment, 1),
			ISNULL(@Enabled, 1),
			ISNULL(@ShortDescription, ''),
			ISNULL(@LongDescription, ''),
			ISNULL(@PrereqIds, '')
		);
		-- Return the new ID
		SELECT CAST(SCOPE_IDENTITY() AS INT) AS [Id];
	END
	ELSE
	BEGIN
		-- Update the existing record
		UPDATE [ClassMain]
		SET
			[ClassName] = ISNULL(@ClassName, [ClassName]),
			[AllowEnrollment] = ISNULL(@AllowEnrollment, [AllowEnrollment]),
			[Enabled] = ISNULL(@Enabled, [Enabled]),
			[Updated] = GETDATE(),
			[ShortDescription] = ISNULL(@ShortDescription, [ShortDescription]),
			[LongDescription] = ISNULL(@LongDescription, [LongDescription]),
			[PrereqIds] = ISNULL(@PrereqIds, [PrereqIds])
		WHERE
			[Id] = @Id;
		-- Return the same ID
		SELECT @Id AS [Id];
	END
END
GO
PRINT N'Altering Procedure [dbo].[SiteUser_GetByEmail]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 1, 2022
-- Description:	Gets user details off of an email key, hiding secrets
-- =============================================
ALTER PROCEDURE [dbo].[SiteUser_GetByEmail]
	-- Add the parameters for the stored procedure here
	@Email NVARCHAR(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT
		[Id],
		[FirstName],
		[LastName],
		[Email],
		-- Don't allow procedure to read back "secrets"
		(CASE WHEN [PasswordHash] IS NULL THEN 0 ELSE 1 END) AS [HasPassword],
		(CASE WHEN [ResetToken] IS NULL THEN 0 ELSE 1 END) AS [HasPendingReset],
		[IsAdmin],
		[Created],
		[Modified],
		[MemberThru],
		CASE WHEN (ISNULL([MemberThru], '1900-01-01') >= GETDATE()) THEN 1 ELSE 0 END AS [IsMember]
	FROM [SiteUser]
	WHERE
		[Email] = @Email
		;
END
GO
PRINT N'Altering Procedure [dbo].[SiteUser_Register]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 26, 2022
-- Description:	Sets the values for a user including membership data
-- =============================================
ALTER PROCEDURE [dbo].[SiteUser_Register]
	-- Add the parameters for the stored procedure here
	@Id INT = NULL,
	@FirstName NVARCHAR(50) = NULL,
	@LastName NVARCHAR(50) = NULL,
	@Email NVARCHAR(100) = NULL,
	@IsAdmin BIT = NULL,
	@MemberThru DATETIME = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	IF (@Id IS NOT NULL)
	BEGIN
		UPDATE [SiteUser]
		SET
			[FirstName] = ISNULL(@FirstName, [FirstName]),
			[LastName] = ISNULL(@LastName, [LastName]),
			[Email] = ISNULL(@Email, [Email]),
			[IsAdmin] = ISNULL(@IsAdmin, [IsAdmin]),
			[MemberThru] = ISNULL(@MemberThru, [MemberThru])
		WHERE
			[Id] = @Id
			;
	END
	ELSE
	BEGIN
		-- User details check out; create new record
		RAISERROR('Users cannot be created through this procedure.', 18, 1);
		RETURN;
	END
END
GO
PRINT N'Creating Procedure [dbo].[SiteUser_GetById]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 1, 2022
-- Description:	Gets user details off of an ID, hiding secrets
-- =============================================
CREATE PROCEDURE [dbo].[SiteUser_GetById]
	-- Add the parameters for the stored procedure here
	@Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SELECT
		[Id],
		[FirstName],
		[LastName],
		[Email],
		-- Don't allow procedure to read back "secrets"
		(CASE WHEN [PasswordHash] IS NULL THEN 0 ELSE 1 END) AS [HasPassword],
		(CASE WHEN [ResetToken] IS NULL THEN 0 ELSE 1 END) AS [HasPendingReset],
		[IsAdmin],
		[Created],
		[Modified],
		[MemberThru],
		CASE WHEN (ISNULL([MemberThru], '1900-01-01') >= GETDATE()) THEN 1 ELSE 0 END AS [IsMember]
	FROM [SiteUser]
	WHERE
		[Id] = @Id
		;
END
GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_Authenticate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_Authenticate]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_RequestReset]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_RequestReset]';


GO
PRINT N'Refreshing Procedure [dbo].[SiteUser_ResetPassword]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[SiteUser_ResetPassword]';


GO
PRINT N'Update complete.';


GO
