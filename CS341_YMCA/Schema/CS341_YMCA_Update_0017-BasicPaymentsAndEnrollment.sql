/*
Deployment script for CS341_YMCA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CS341_YMCA"
:setvar DefaultFilePrefix "CS341_YMCA"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[ClassEnrollment]...';


GO
CREATE TABLE [dbo].[ClassEnrollment] (
    [Id]           INT      IDENTITY (1, 1) NOT NULL,
    [UserId]       INT      NOT NULL,
    [ClassId]      INT      NOT NULL,
    [PaymentId]    INT      NULL,
    [EnrolledDate] DATETIME NOT NULL,
    [PassedYN]     BIT      NULL,
    CONSTRAINT [PK_ClassEnrollment] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[SiteUserPayments]...';


GO
CREATE TABLE [dbo].[SiteUserPayments] (
    [Id]           INT            IDENTITY (1, 1) NOT NULL,
    [UserId]       INT            NOT NULL,
    [Amount]       DECIMAL (18)   NOT NULL,
    [Paid]         DATETIME       NOT NULL,
    [CardNumber]   NVARCHAR (50)  NOT NULL,
    [SecurityCode] INT            NOT NULL,
    [PostalCode]   INT            NOT NULL,
    [HolderName]   NVARCHAR (100) NOT NULL,
    CONSTRAINT [PK_SiteUser_Payments] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassEnrollment_EnrolledDate]...';


GO
ALTER TABLE [dbo].[ClassEnrollment]
    ADD CONSTRAINT [DF_ClassEnrollment_EnrolledDate] DEFAULT (getdate()) FOR [EnrolledDate];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SiteUser_Payments_Paid]...';


GO
ALTER TABLE [dbo].[SiteUserPayments]
    ADD CONSTRAINT [DF_SiteUser_Payments_Paid] DEFAULT (getdate()) FOR [Paid];


GO
PRINT N'Creating Procedure [dbo].[Class_DropUser]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Drops a user from the class, freeing a seat.
-- =============================================
CREATE PROCEDURE Class_DropUser
	-- Add the parameters for the stored procedure here
	@UserId INT,
	@ClassId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here
	DELETE FROM [ClassEnrollment]
	WHERE
		[UserId] = @UserId
		AND [ClassId] = @ClassId;
END
GO
PRINT N'Creating Procedure [dbo].[Class_EnrollUser]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Enrolls a user in the class, taking a seat.
-- =============================================
CREATE PROCEDURE Class_EnrollUser
	-- Add the parameters for the stored procedure here
	@UserId INT,
	@ClassId INT,
	@PaymentId INT = NULL
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here
	INSERT INTO [ClassEnrollment]
	(
		[UserId],
		[ClassId],
		[PaymentId],
		[PassedYN]
	) VALUES
	(
		@UserId,
		@ClassId,
		@PaymentId,
		NULL
	)
END
GO
PRINT N'Creating Procedure [dbo].[Class_GetByUserId]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Feb. 23, 2022
-- Description:	Lists all courses meeting certain criteria
-- =============================================
CREATE PROCEDURE [dbo].[Class_GetByUserId]
	-- Add the parameters for the stored procedure here
	@UserId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassName],
		[AllowEnrollment],
		[Enabled],
		[Created],
		[Updated],
		[ShortDescription],
		[LongDescription],
		[MemberEnrollmentStart],
		[MemberEnrollmentDays],
		[NonMemberEnrollmentStart],
		[NonMemberEnrollmentDays],
		[AllowNonMembers],
		[MemberPrice],
		[NonMemberPrice],
		[Location],
		[MaxSeats],
		[FulfillCsv],
		[RequireCsv],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [MemberEnrollmentStart] IS NOT NULL
			AND [MemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [MemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [MemberEnrollmentDays], [MemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [MemberEnrollmentOpen],
		CASE WHEN (
			[AllowEnrollment] = 1
			AND [NonMemberEnrollmentStart] IS NOT NULL
			AND [NonMemberEnrollmentDays] IS NOT NULL
			AND GETDATE() > [NonMemberEnrollmentStart]
			AND GETDATE() < DATEADD(DAY, [NonMemberEnrollmentDays], [NonMemberEnrollmentStart])
		) THEN 1 ELSE 0 END AS [NonMemberEnrollmentOpen]
	FROM [ClassMain]
	WHERE
		[Id] IN (
			SELECT [ClassId]
			FROM [ClassEnrollment]
			WHERE [UserId] = @UserId				
		)
	ORDER BY [Id];

	END
GO
PRINT N'Creating Procedure [dbo].[ClassEnrollment_GetByClassId]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Drops a user from the class, freeing a seat.
-- =============================================
CREATE PROCEDURE ClassEnrollment_GetByClassId
	-- Add the parameters for the stored procedure here
	@ClassId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here
	SELECT [Id],
		[UserId],
		[ClassId],
		[PaymentId],
		[EnrolledDate],
		[PassedYN]
	FROM [ClassEnrollment]
	WHERE
		[ClassId] = @ClassId;
END
GO
PRINT N'Creating Procedure [dbo].[ClassEnrollment_GetByUserId]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Drops a user from the class, freeing a seat.
-- =============================================
CREATE PROCEDURE ClassEnrollment_GetByUserId
	-- Add the parameters for the stored procedure here
	@UserId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Insert statements for procedure here
	SELECT [Id],
		[UserId],
		[ClassId],
		[PaymentId],
		[EnrolledDate],
		[PassedYN]
	FROM [ClassEnrollment]
	WHERE
		[UserId] = @UserId;
END
GO
PRINT N'Creating Procedure [dbo].[ClassSchedule_GetByUserId]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 1, 2022
-- Description:	Lists all sessions for a specified user's enrollment
-- =============================================
CREATE PROCEDURE [dbo].[ClassSchedule_GetByUserId]
	-- Add the parameters for the stored procedure here
	@UserId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[Id],
		[ClassId],
		[FirstDate],
		[Recurrence],
		[Duration],
		[Created],
		[Updated],
		[Occurrences]
	FROM [ClassSchedule]
	WHERE
		[ClassId] IN (
			SELECT [ClassId]
			FROM [ClassEnrollment]
			WHERE [UserId] = @UserId				
		)
	ORDER BY [FirstDate];

	END
GO
PRINT N'Creating Procedure [dbo].[SiteUserPayments_Enter]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Places a payment record into the database.
-- =============================================
CREATE PROCEDURE [SiteUserPayments_Enter]
	-- Add the parameters for the stored procedure here
	@UserId INT,
	@Amount DECIMAL(18, 0),
	@CardNumber NVARCHAR(50),
	@SecurityCode INT,
	@PostalCode INT,
	@HolderName NVARCHAR(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	INSERT INTO [SiteUserPayments]
	(
		[UserId],
		[Amount],
		[CardNumber],
		[SecurityCode],
		[PostalCode],
		[HolderName]
	) VALUES
	(
		@UserId,
		@Amount,
		@CardNumber,
		@SecurityCode,
		@PostalCode,
		@HolderName
	);

	SELECT CAST(SCOPE_IDENTITY() AS INT) AS [Id];
END
GO
PRINT N'Creating Procedure [dbo].[SiteUserPayments_GetById]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Gets a set of payments meeting a condition.
-- =============================================
CREATE PROCEDURE [dbo].[SiteUserPayments_GetById]
	-- Add the parameters for the stored procedure here
	@Id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [Id],
		[UserId],
		[Amount],
		[CardNumber],
		[SecurityCode],
		[PostalCode],
		[HolderName]
	FROM [SiteUserPayments]
	WHERE
		[Id] = @Id;
END
GO
PRINT N'Creating Procedure [dbo].[SiteUserPayments_GetByUserId]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Gets a set of payments meeting a condition.
-- =============================================
CREATE PROCEDURE SiteUserPayments_GetByUserId
	-- Add the parameters for the stored procedure here
	@UserId INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT
		[UserId],
		[Amount],
		[CardNumber],
		[SecurityCode],
		[PostalCode],
		[HolderName]
	FROM [SiteUserPayments]
	WHERE
		[UserId] = @UserId;
END
GO
PRINT N'Creating Procedure [dbo].[SiteUserPayments_List]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Mar. 29, 2022
-- Description:	Gets a set of payments meeting a condition.
-- =============================================
CREATE PROCEDURE SiteUserPayments_List
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT [Id],
		[UserId],
		[Amount],
		[CardNumber],
		[SecurityCode],
		[PostalCode],
		[HolderName]
	FROM [SiteUserPayments];
END
GO
PRINT N'Update complete.';


GO
