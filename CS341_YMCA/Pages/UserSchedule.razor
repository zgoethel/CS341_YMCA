@page "/Schedule"

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject ClassRepository Classes

<PageTitle>Edit Schedule</PageTitle>

@* DROP CONFIRMATION DIALOG *@
<BsModal @ref=dropModal
    SubmitText="Drop"
    SubmitAction=DropDialogSubmit
    SubmitClass="danger">

    <Title>You are about to drop the class <strong>'@dropClass?.ClassName'</strong></Title>
    <Body>
        <p class="font-weight-bold">This action cannot be undone. Are you sure you wish to continue?</p>
        <ul class="text-danger">
            <li>You will no longer be enrolled in this class.</li>
            <li>The class fee will <strong>not</strong> be refunded.</li>
        </ul>
    </Body>
</BsModal>

<h1>Edit Schedule</h1>
<hr />
<h3>View and change your class enrollments</h3>

@* SCROLL PANE *@
<div class="overflow-auto mt-3">

@if (enrolledClasses!.Count == 0)
{
    @* DISPLAY IF NOT ENROLLED IN ANY CLASSES *@
    <h4 class="mt-3">You are not registered for any classes</h4>
} else
{
    @* ENROLLED CLASSES CONTAINER (GREY BOX) *@
    <div class="bg-secondary bg-opacity-50 overflow-auto p-2" id="sched-holder">
        @* ITERATE THROUGH ENROLLED CLASSE *@
        @foreach(var Class in enrolledClasses)
        {
            @* DISPLAY SHADOWED CARD FOR EACH CLASS *@
            <div class="m-2 p-2 bg-light shadow">
                
                <div style="display: block;height: 9.5em;" class="overflow-auto @(Class.CanceledDate is null ? "" : "text-decoration-line-through")">
                    <a href="Enroll/@(Class.ClassId)"><h5>@(Class.ClassName)</h5></a>
                    
                    <p>@Class.ShortDescription</p>
                </div>
                <div style="display: block;">
                    <hr class="mt-2 mb-2" />

                    @if (Class.CanceledDate is null)
                    {
                        @* CLASS VIEW LINK *@
                        <a class="btn btn-primary me-1" href="Enroll/@(Class.ClassId)">View</a>
                        @* CLASS DROP BUTTON *@
                        <a class="btn btn-danger" @onclick="() => OpenDropModal(Class)">Drop</a>
                    } else
                    {
                        <div class="alert alert-danger p-1">
                            Canceled; click to
                            @* CLASS DROP BUTTON *@
                            <a role="button" class="text-decoration-underline" @onclick="() => OpenDropModal(Class)">drop</a>.
                        </div>
                    }
                    
                </div>
            </div>
        }
    </div>

    @* 5-WEEK SCHEDULE VIEWER *@
    <h3 class="mt-4 mb-3">Your upcoming weekly schedules</h3>
    <ClassScheduler DisplayClassTitles=true
        ShowEditing=false
        NumWeeks=5
        DisplayUserSched=LoggedIn.Id
        OverrideDateFocus=true />
}
</div>

<style>
    div#sched-holder
    {
        box-shadow: 0 0 1em 1em #9da4ac inset;
    }
    div#sched-holder > div
    {
        vertical-align: top;
        width: 15em;
        height: 14em;
        display: inline-block;
        border-radius: 0.2em;
        border: 1px solid #625353;
    }
</style>

@code
{
    /// <summary>
    /// Layout of bound form data.
    /// </summary>
    [CascadingParameter]
    private SiteUserDBO LoggedIn { get; set; } = new();

    private List<ClassEnrollmentDBO> enrolledClasses => Classes.ClassEnrollment_GetByUserId(LoggedIn.Id).Get()!;
    private BsModal? dropModal;
    private ClassEnrollmentDBO? dropClass;

    /// <summary>
    /// Displays drop modal to drop a selected class.
    /// </summary>
    /// <param name="_class">Class enrollment to nullify.</param>
    private void OpenDropModal(ClassEnrollmentDBO _class)
    {
        dropClass = _class;
        StateHasChanged();

        dropModal!.Open();
    }

    /// <summary>
    /// Performs the confirmed drop dialog action.
    /// </summary>
    /// <returns>Whether the dialog should close.</returns>
    private async Task<bool> DropDialogSubmit() => await Task.Run(() =>
    {
        var Result = Classes.Class_DropUser(dropClass!.ClassId, LoggedIn!.Id);
        dropClass = null;
        InvokeAsync(() => StateHasChanged());
        return Result.Success;
    });
}