@page "/ManageUsers/{Id}"

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject SiteUserRepository SiteUsers
@inject ClassRepository Classes
@inject DatabaseService Sql
@inject NavigationManager Nav

<PageTitle>Manage User Details</PageTitle>

@* DELETE CONFIRMATION MODAL*@
<BsModal @ref=DeleteModal
    SubmitText="Delete"
    SubmitAction=DeleteDialogSubmit
    SubmitClass="danger">

    <Title>You are about to delete the account <strong>'@ActiveUser!.Email'</strong></Title>
    <Body>
        <p class="font-weight-bold">This action cannot be undone. Are you sure you wish to continue?</p>
        <ul class="text-danger">
            <li>Payments for this account will <strong>not</strong> be automatically refunded.</li>
            <li>The user will be dropped from all class in which they are enrolled.</li>
            <li>All acquired prerequisites of the account will be reset, and the enrollment history will be lost.</li>
            <li><strong>Ensure all patrons have been refunded accordingly prior to deleting any course or account.</strong></li>
        </ul>
    </Body>
</BsModal>

@* MAKE ADMIN CONFIRMATION MODAL*@
<BsModal @ref=MakeAdminModal
    SubmitText="Continue"
    SubmitAction=MakeAdminDialogSubmit
    SubmitClass="danger">

    <Title>You are about to make <strong>@ActiveUser!.FirstName</strong> @(ActiveUser.IsAdmin ? "a regular user" : "an admin").</Title>
    <Body>
        <p class="font-weight-bold">This will affect their ability to control class details and access sensitive user data.
            Are you sure you wish to continue?</p>
    </Body>
</BsModal>

@* DISPLAY VALIDATION MESSAGE IF EXISTS *@
@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="alert alert-warning">@ValidationMessage</div>
}

@if (LoggedIn!.IsAdmin)
{
    <div style="float: left;">

        @* BACK BUTTON *@
        <i role="button" class="oi oi-chevron-left m-3" onclick="history.back()"></i>

    </div>
    <div style="float: right;">

        @* USER DELETE BUTTON *@
        <button class="btn btn-outline-danger m-2" @onclick="() => DeleteModal!.Open()">Delete User</button>
        
        @* USER TOGGLE ADMIN BUTTON *@
        <button class="btn btn-outline-warning m-2" @onclick="() => MakeAdminModal!.Open()">Make @(ActiveUser!.IsAdmin ? "Not" : "") Admin</button>
        
    </div>

    @* HEAD AREA*@
    <h1>User Account Editor</h1>
    <br style="height: 0;display: block;">
    <hr />
    <h3>Managing details for <strong>@ActiveUser!.FirstName @ActiveUser.LastName</strong> ('@ActiveUser.Email')</h3>

    <EditForm Model=ActiveUser>

    <div class="row">
        <div class="col-lg-6 mb-4">

            @* EXPIRATION DATE EDITING CARD *@
            <div class="card shadow mt-4">
                <div class="card-header">Membership Expiration</div>
                <div class="card-body">

                <div class="row">
                    <div class="col-sm-8">

                        @* CURRENT EXPIRATION DATE PUT HERE *@
                        @if (ActiveUser.MemberThru is null)
                        {
                            <p>@ActiveUser.FirstName is not a member.</p>
                            <p>To make them a member, enter and save an expiration date.</p>
                        } else if (ActiveUser.MemberThru > DateTime.Now)
                        {
                            <p>@ActiveUser.FirstName is a member through</p>
                            <h3>@ActiveUser.MemberThru?.ToLongDateString()</h3>
                        } else
                        {
                            <p class="text-danger mb-0">@ActiveUser.FirstName's membership expired on</p>
                            <h3 class="text-danger mb-4">@ActiveUser.MemberThru?.ToLongDateString()</h3>
                            <p>To renew their membership, enter and save a new expiration date.</p>
                        }

                    </div>
                    <div class="col-sm-4 border-start ps-4">

                        @* EXPIRATION DATE OF MEMBERSHIP FIELD *@
                        <label>Expiration Date:</label>
                        <InputDate @bind-Value=editingDate class="form-control" style="max-width: 150px;" />
                        
                        @* EXPIRATION "SAVE" BUTTON *@
                        <button class="btn btn-primary mt-2"
                            @onclick="() =>
                            {
                                ActiveUser.MemberThru = editingDate;
                                SiteUsers.SiteUser_Set(Id: ActiveUser.Id, MemberThru: editingDate).Get();
                                StateHasChanged();
                            }">Submit</button>
                    
                    </div>
                </div>

                </div>
            </div>
            
            @* FULFILLED PREREQ EDITING CARD *@
            <div class="card shadow mt-4">
                <div class="card-header">Fulfilled Prereqs</div>
                <div class="card-body">
                
                <div class="row">
                    <div class="col-sm-8">

                        <CsvSelector Csv=@ActiveUser.FulfilledCsv
                            Exclude=@(new())
                            @ref=fulfillSelector
                            Items=@(Classes!.Class_ListReqs().Get()!)
                            Callback="() =>
                            {
                                ActiveUser.FulfilledCsv = fulfillSelector!.Csv!;
                            }" />

                    </div>
                    <div class="col-sm-4 border-start ps-4">

                        <button class="btn btn-primary mt-2"
                            @onclick="() =>
                            {
                                SiteUsers.SiteUser_Set(Id: ActiveUser.Id, FulfilledCsv: ActiveUser.FulfilledCsv).Get();
                                StateHasChanged();
                            }">Submit</button>

                    </div>
                </div>
                

                </div>
            </div>

        </div>
        <div class="col-lg-6">

            <div class="card shadow mt-4">
                <div class="card-header">Class Enrollment</div>
                <div class="card-body p-0">

                @foreach (var enroll in classEnrollment!)
                {
                    @*<div class="alert alert-success">*@
                        <br />
                        <p style="float: right;" class="me-3">Enrolled on <strong>@enroll.EnrolledDate.ToShortDateString()</strong></p>
                        <a href="ManageClasses/@(enroll.ClassId)" class="ms-3 me-2 @(enroll.CanceledDate is null ? "" : "text-decoration-line-through")">@enroll.ClassName</a>;

                        @if (enroll.CanceledDate is not null)
                        {
                            <i class="me-2">(Canceled)</i>
                        }

                        @if (enroll.PassedYN is null)
                        {
                            <span class="badge bg-secondary">No Grade</span>
                        } else if (enroll.PassedYN == true)
                        {
                            <span class="badge bg-success">Passed</span>
                        } else
                        {
                            <span class="badge bg-danger">Failed</span>
                        }

                        <hr class="mb-0" />
                    @*</div>*@
                }
                
                </div>
            </div>
            
        </div>
    </div>

    </EditForm>

} else
{
    <div class="alert alert-danger">You are <strong>not</strong> an admin user and cannot access this page.</div>
}

@code {
    /// <summary>
    /// DBO of the currently logged in user.
    /// </summary>
    [CascadingParameter]
    protected SiteUserDBO? LoggedIn { get; set; }

    /// <summary>
    /// ID of the user being edited.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// Date bound to the datepicker element.
    /// </summary>
    private DateTime? editingDate;

    private SiteUserDBO? ActiveUser;
    private string? ValidationMessage;
    private BsModal? DeleteModal;
    private BsModal? MakeAdminModal;
    private List<ClassEnrollmentDBO>? classEnrollment;
    private CsvSelector? fulfillSelector;

    protected override void OnInitialized()
    {
        // Load the existing user record
        ActiveUser = SiteUsers.SiteUser_GetById(int.Parse(Id!)).Get()!;
        editingDate = ActiveUser.MemberThru;

        // Load the class enrollment for the user
        classEnrollment = Classes.ClassEnrollment_GetByUserId(ActiveUser.Id).Get()!;
    }

    /// <summary>
    /// Called when the delete dialog is accepted to perform deletion.
    /// </summary>
    /// <returns>Whether the modal should close.</returns>
    private async Task<bool> DeleteDialogSubmit() => await Task.Run(() =>
    {
        // Perform the deletion
        var Result = SiteUsers.SiteUser_DeleteById(ActiveUser!.Id).Get()!;
        Nav.NavigateTo("ManageUsers");

        // Leave dialog open; can mess with redirect to close
        return false;
    });

    private async Task<bool> MakeAdminDialogSubmit() => await Task.Run(() =>
    {
        // Perform the change
        SiteUsers.SiteUser_Set(Id: ActiveUser!.Id, IsAdmin: !ActiveUser.IsAdmin).Get();
        ActiveUser!.IsAdmin = !ActiveUser!.IsAdmin;
        InvokeAsync(StateHasChanged);

        // Close the dialog after confirming
        return true;
    });
}