@page "/ManageUsers/{Id}"

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject SiteUserRepository SiteUsers
@inject Database Sql
@inject NavigationManager Nav

<PageTitle>Manage User Details</PageTitle>

<BsModal @ref=DeleteModal
    SubmitText="Delete"
    SubmitAction=DeleteDialogSubmit
    SubmitClass="danger">

    <Title>You are about to delete the account <strong>'@ActiveUser!.Email'</strong></Title>
    <Body>
        <p class="font-weight-bold">This action cannot be undone. Are you sure you wish to continue?</p>
    </Body>
</BsModal>

@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="alert alert-warning">@ValidationMessage</div>
}

@if (LoggedIn!.IsAdmin)
{

    <h1>User Account Editor</h1>
    <hr />
    <h3>Managing details for <strong>@ActiveUser!.FirstName @ActiveUser.LastName</strong> ('@ActiveUser.Email')</h3>

    <button class="btn btn-danger mt-4" @onclick="() => DeleteModal!.Open()">Delete User</button>

} else
{
    <div class="alert alert-danger">You are <strong>not</strong> an admin user and cannot access this page.</div>
}

@code {
    [CascadingParameter]
    protected SiteUserDBO? LoggedIn { get; set; }
    [Parameter]
    public string? Id { get; set; }

    private SiteUserDBO? ActiveUser;
    private string? ValidationMessage;
    private BsModal? DeleteModal;

    protected override void OnInitialized()
    {
        if (Id != "Create")
            ActiveUser = SiteUsers.SiteUser_GetById(int.Parse(Id!)).Get()!;
    }

    private async Task<bool> DeleteDialogSubmit() => await Task.Run(() =>
    {
        var Result = SiteUsers.SiteUser_DeleteById(ActiveUser!.Id).Get()!;
        Nav.NavigateTo("ManageUsers");

        return false;
    });
}