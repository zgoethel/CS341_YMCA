@page "/Enroll/{Id}"

@using CS341_YMCA.Components
@using CS341_YMCA.Services

<PageTitle>@activeClass.ClassName</PageTitle>

@* CLASS DROP CONFIRMATION MODAL*@
<BsModal @ref=dropModal
    SubmitText="Drop"
    SubmitAction=DropDialogSubmit
    SubmitClass="danger">

    <Title>You are about to drop the class <strong>'@activeClass!.ClassName'</strong></Title>
    <Body>
        <p class="font-weight-bold">This action cannot be undone. Are you sure you wish to continue?</p>
        <ul class="text-danger">
            <li>You will no longer be enrolled in this class.</li>
            <li>The class fee will <strong>not</strong> be refunded.</li>
        </ul>
    </Body>
</BsModal>

@if (activeClass.CanceledDate is not null)
{
    <div class="alert alert-danger">This class has been canceled and is no longer available for enrollment.</div>
}

<h1>@activeClass.ClassName</h1>
<hr />

<div class="row">
<div class="col-lg-7">
@* PAGE LEFT COLUMN BEGINS HERE *@

<h3>@activeClass.ShortDescription</h3>
<br />

@if (!string.IsNullOrEmpty(activeClass.FulfillCsv))
{
    <h4 style="display: inline;" class="me-4">

        @* REQ. CODE FULLFILLMENT LIST *@
        Fulfills: 
        @foreach (var Item in activeClass.FulfillCsv.Split(","))
        {
            <span class="ms-2 badge bg-info">@Item</span>
        }

    </h4>
}

@if (!string.IsNullOrEmpty(activeClass.RequireCsv))
{
    <h4 style="display: inline;">

        @* REQ. CODE REQUIREMENT LIST *@
        Prerequisites: 
        @foreach (var Item in activeClass.RequireCsv.Split(","))
        {
            <span class="ms-2 badge bg-secondary">@Item</span>
        }

    </h4>
}

@* LONG DESCRIPTION (SUPPORTS HTML) *@
@{
    // Replaces newlines with HTML newlines
    var DescriptionNewlines = (MarkupString)(activeClass.LongDescription.Replace("\n", "<br />"));
}
<p class="mt-4 col-11">@DescriptionNewlines</p>
<br />

@* CONFIGURABLE IMAGE *@
<img style="display: block;max-width: 86%;"
    class="mb-4"
    src="@photoUri"
    alt="Class image is missing" />

@* PAGE LEFT COLUMN ENDS HERE *@
</div>
<div class="col-lg-5">
@* PAGE RIGHT COLUMN BEGINS HERE *@

<h3>Enrollment Information</h3>
<p class="mb-4">Interested in this class? Continue reading to enroll.</p>

@* PRICING CARD *@
<div class="card mb-4">
<div class="card-header">Membership and Fees</div>
<div class="card-body">

    @* DISPLAY WHO CAN ENROLL *@
    @if (activeClass.AllowNonMembers)
    {
        <p>
        Both members with paid memberships and public non-members
        may enroll and participate in this class.
        </p>
    } else
    {
        <p>
        This class is open only to those holding valid Y memberships.
        </p>
    }
        
@* DISPLAY PRICING INFO *@
<div class="row mt-4">
    <div class="col-sm-6" style="text-align: center;">

        @* MEMBER PRICING *@
        @if (activeClass.MemberPrice > 0.0m)
        {
            <h1>$@((int?)activeClass.MemberPrice)<sup>@((activeClass.MemberPrice % 1)
                .ToString(".00").Replace(".", ""))</sup></h1>
        } else
        { <h1>No fee</h1> }
        <p>For membership holders</p>

    </div>
    @if (activeClass.AllowNonMembers)
    {
        <div class="col-sm-6" style="text-align: center;">

            @* NON-MEMBER PRICING *@
            @if (activeClass.NonMemberPrice > 0.0m)
            {
                <h1>$@((int?)activeClass.NonMemberPrice)<sup>@((activeClass.NonMemberPrice % 1)
                    .ToString(".00").Replace(".", ""))</sup></h1>
            } else
            { <h1>No fee</h1> }
            <p>Without membership</p>

        </div>
    } else
    {
        @* DISPLAY LOCK IF MEMBERS NOT ALLOWED *@
        <div class="col-sm-6" style="text-align: center;">
            <h1><i class="oi oi-lock-locked"></i></h1>
            <p>Without membership</p>
        </div>
    }
</div>

</div>
</div>

@* ENROLL ACTION CARD *@
<div class="card mb-4">
<div class="card-header">Open Seats</div>
<div class="card-body">

    <div class="row">
    <div class="col-sm-7 pt-2">

        @* LOCATION AND BASIC SCHEDULE INFO *@
        <p><strong>Holding sessions</strong><br />@@ @(string.IsNullOrEmpty(activeClass.Location) ? "TBA" : activeClass.Location)</p>
        @{
            var Sessions = Classes!.ClassSchedule_List(activeClass.Id).Get()!;
            if (Sessions.Count == 0)
            {
                <p>No schedule available</p>
            } else
            {
                <p>Starting on @Sessions[0].FirstDate.ToLongDateString()</p>
            }
        }

    </div>
    
    @* VALIDATION ERROR MESSAGE IF EXISTS *@
    @if (!string.IsNullOrEmpty(enrollmentError))
    {
        <span class="alert alert-danger">@enrollmentError</span>
    }

    @if (activeClass.CanceledDate is not null)
    {
        <alert class="alert alert-danger">This class has been canceled by an admin.</alert>
    } else if (calculations.IsEnrolled)
    {
        @* DISPLAYED WHEN ALREADY ENROLLED IN CLASS *@

        <span class="alert alert-success">
            <span style="padding-top: 0.3em;display: inline-block;">You are enrolled in this course!</span>
            <button class="btn btn-success"
                style="float: right;"
                @onclick="() => dropModal!.Open()">Drop</button>
        </span>
    } else if (!activeClass.AllowEnrollment)
    {
        @* DISPLAYED WHEN ENROLLMENT IS PAUSED *@

        <span class="alert alert-secondary">Enrollment is disabled at this time.</span>
    } else if (!calculations.CanEnroll)
    {
        @* DISPLAYED WHEN NOT ALLOWED TO ENROLL*@
        
        <span class="alert alert-warning">A membership is required to enroll in this class.</span>
    } else if (calculations.OpenForUser)
    {
        if  (!calculations.UnlimitedSeats && activeClass.SeatsTaken >= activeClass.MaxSeats)
        {
            @* DISPLAYED IF NO SEATS AVAILABLE *@

            <span class="alert alert-warning">Sorry, all seats are taken for this course!</span>
        } else if ((LoggedIn?.Id ?? 0) == 0)
        {
            @* DISPLAYED IF OPEN BUT USER IS GUEST *@

            <span class="alert alert-secondary">Please log in to enroll in courses.</span>
        } else
        {
            @* DISPLAYED IF ALLOWED TO ENROLL AND OPEN *@

            <div class="col-sm-5">
                @if (!calculations.UnlimitedSeats)
                {
                    <span style="font-size: 1.3em;font-weight: bold;">@(activeClass.MaxSeats - activeClass.SeatsTaken)</span>
                    <span style="font-size: 1.2em;">&nbsp;open seats!</span>
                    <br />
                }
                @{ var Conflict = DetectConflict(); }
                @if (string.IsNullOrEmpty(Conflict))
                {
                    <p class="mt-2">Your price: <strong>$@string.Format("{0:0.00}", calculations.ThisUserCost)</strong></p>
                    <button class="btn btn-success mt-1 mb-1" @onclick=EnrollClick>Enroll</button>
                }
                <br />
            </div>

            @* CONFLICT ERROR MESSAG IF ONE EXISTS *@
            @if (!string.IsNullOrEmpty(Conflict))
            { 
                <div class="alert alert-danger">@Conflict</div>
            }
        }
    } else if (calculations.ClosedForUser)
    {
        @* DISPLAYED WHEN ENROLLMENT WINDOW HAS ELAPSED *@

        <p>Enrollment closed on</p>
        <h3>@(calculations.EnrollmentClose?.ToLongDateString() ?? "N/A")</h3>
    } else
    {
        @* DISPLAYED WHEN ENROLLMENT IS NOT YET OPEN *@

        <p>

        This class opens for
        @if (LoggedIn.IsMember) { <span>members</span> }
        else { <span>non-members</span> }
        starting
        <h3>@(calculations.EnrollmentOpen?.ToLongDateString() ?? "TBA")</h3>
    
        </p>
    }
</div>

@* CLASS FIRST WEEK SCHEDULE *@
<h4 class="mt-2">Class Schedule</h4>
<hr class="margin: 0;" />
<ClassScheduler Class=activeClass ShowEditing=false></ClassScheduler>

</div>
</div>

@* PAGE RIGHT COLUMN ENDS HERE *@
</div>
</div>

@* PAYMENT MODAL COMPONENT *@
<PaymentModal @ref=paymentScreen
    PaymentCallback="(Id) =>
    {
        EnrollWithPayment(Id);
    }" />