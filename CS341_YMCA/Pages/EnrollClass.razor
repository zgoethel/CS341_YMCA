@page "/Enroll/{Id}"

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject ClassRepository Classes
@inject Database Sql
@inject ClassValidationService ClassValidation

<PageTitle>@ActiveClass.ClassName</PageTitle>

<BsModal @ref=DropModal
    SubmitText="Drop"
    SubmitAction=DropDialogSubmit
    SubmitClass="danger">

    <Title>You are about to drop the class <strong>'@ActiveClass!.ClassName'</strong></Title>
    <Body>
        <p class="font-weight-bold">This action cannot be undone. Are you sure you wish to continue?</p>
        <ul class="text-danger">
            <li>You will no longer be enrolled in this class.</li>
            <li>The class fee will <strong>not</strong> be refunded.</li>
        </ul>
    </Body>
</BsModal>

<h1>@ActiveClass.ClassName</h1>
<hr />

<div class="row">
<div class="col-lg-7">
@* PAGE LEFT COLUMN BEGINS HERE *@

<h3>@ActiveClass.ShortDescription</h3>
<br />

@if (!string.IsNullOrEmpty(ActiveClass.FulfillCsv))
{
    <h4 style="display: inline;" class="me-4">
        Fulfills: 
        @foreach (var Item in ActiveClass.FulfillCsv.Split(","))
        {
            <span class="ms-2 badge bg-info">@Item</span>
        }
    </h4>
}

@if (!string.IsNullOrEmpty(ActiveClass.RequireCsv))
{
    <h4 style="display: inline;">
        Prerequisites: 
        @foreach (var Item in ActiveClass.RequireCsv.Split(","))
        {
            <span class="ms-2 badge bg-secondary">@Item</span>
        }
    </h4>
}

@{
    // Replaces newlines with HTML newlines
    var DescriptionNewlines = (MarkupString)(ActiveClass.LongDescription.Replace("\n", "<br />"));
}
<p class="mt-4 col-11">@DescriptionNewlines</p>
<br />

<!-- CONFIGURABLE IMAGE -->
<img style="display: block;max-width: 86%;" class="mb-4" src="images/stock_photo.jpg" alt="Class image is missing" />

@* PAGE LEFT COLUMN ENDS HERE *@
</div>
<div class="col-lg-5">
@* PAGE RIGHT COLUMN BEGINS HERE *@

<h3>Enrollment Information</h3>
<p class="mb-4">Interested in this class? Continue reading to enroll.</p>
        
<div class="card mb-4">
<div class="card-header">Membership and Fees</div>
<div class="card-body">

@if(ActiveClass.AllowNonMembers)
{
    <p>
    Both members with paid memberships and public non-members
    may enroll and participate in this class.
    </p>
} else
{
    <p>
    This class is open only to those holding valid Y memberships.
    </p>
}
        
<!-- MODIFIABLE CLASS PRICES -->
<div class="row mt-4">
<div class="col-sm-6" style="text-align: center;">
    @if (ActiveClass.MemberPrice > 0.0)
    {
        <h1>$@((int?)ActiveClass.MemberPrice)<sup>@((ActiveClass.MemberPrice % 1)
            .ToString(".00").Replace(".", ""))</sup></h1>
    } else
    { <h1>No fee</h1> }
    <p>For membership holders</p>
</div>
@if (ActiveClass.AllowNonMembers)
{
    <div class="col-sm-6" style="text-align: center;">
        @if (ActiveClass.NonMemberPrice > 0.0)
        {
            <h1>$@((int?)ActiveClass.NonMemberPrice)<sup>@((ActiveClass.NonMemberPrice % 1)
                .ToString(".00").Replace(".", ""))</sup></h1>
        } else
        { <h1>No fee</h1> }
        <p>Without membership</p>
    </div>
} else
{
    <div class="col-sm-6" style="text-align: center;">
        <h1><i class="oi oi-lock-locked"></i></h1>
        <p>Without membership</p>
    </div>
}
</div>

</div>
</div>

<div class="card mb-4">
<div class="card-header">Open Seats</div>
<div class="card-body">

<div class="row">
<div class="col-sm-7 pt-2">
    <p><strong>Holding sessions</strong><br />@@ @(ActiveClass.Location ?? "TBA")</p>
    @{
        var Sessions = Classes.ClassSchedule_List(ActiveClass.Id).Get()!;
        if (Sessions.Count == 0)
        {
            <p>No schedule available</p>
        } else
        {
            <p>Starting on @Sessions[0].FirstDate.ToLongDateString()</p>
        }
    }
</div>

@{
    // Calculate window date values for use in display UI
    var MemberCloseDate = (ActiveClass.MemberEnrollmentStart ?? DateTime.UnixEpoch)
        .AddDays(ActiveClass.MemberEnrollmentDays ?? 1);
    var NonMemberCloseDate = (ActiveClass.NonMemberEnrollmentStart ?? DateTime.UnixEpoch)
        .AddDays(ActiveClass.NonMemberEnrollmentDays ?? 1);
    // Determine the latest close date (for members)
    var AbsoluteClose = (NonMemberCloseDate > MemberCloseDate)
        ? NonMemberCloseDate
        : MemberCloseDate;
    var MemberOpenDate = ActiveClass.MemberEnrollmentStart ?? DateTime.MaxValue;
    var NonMemberOpenDate = ActiveClass.NonMemberEnrollmentStart ?? DateTime.MaxValue;
    // Determine the earliest open date (for members)
    var AbsoluteOpen = (NonMemberOpenDate < MemberOpenDate)
        ? NonMemberOpenDate
        : MemberOpenDate;

    // Determine member/non-member ability to enroll in this class
    var ThisUserCost = ActiveClass.NonMemberPrice;
    if (LoggedIn.IsMember)
        ThisUserCost = ActiveClass.MemberPrice;
    var CanEnroll = ActiveClass.AllowNonMembers || LoggedIn.IsMember;

    var UserEnrollment = (LoggedIn.Id == 0)
        ? new()
        : Classes.ClassEnrollment_GetByUserId(LoggedIn!.Id).Get()!;
    var _IsEnrolled = UserEnrollment.Find((It) => It.ClassId == ActiveClass.Id) is not null;
}
@if (_IsEnrolled)
{
    @* DISPLAYED WHEN ALREADY ENROLLED IN CLASS *@

     <span class="alert alert-success">
        <span style="padding-top: 0.3em;display: inline-block;">You are enrolled in this course!</span>
        <button class="btn btn-success"
            style="float: right;"
            @onclick="() => DropModal!.Open()">Drop</button>
    </span>
} else if (!ActiveClass.AllowEnrollment)
{
    @* DISPLAYED WHEN ENROLLMENT IS PAUSED *@

    <p>Enrollment is disabled at this time.</p>
} else if (
    (LoggedIn.IsMember && ActiveClass.MemberEnrollmentOpen)
    || ActiveClass.NonMemberEnrollmentOpen
)
{
    if  ((ActiveClass.MaxSeats ?? 0) != 0 && SeatsTaken >= ActiveClass.MaxSeats)
    { <span class="alert alert-warning">Sorry, all seats are taken for this course!</span>}
    else if ((LoggedIn?.Id ?? 0) == 0)
    { <span class="alert alert-secondary">Please log in to enroll in courses.</span> }
    else
    {
    @* DISPLAYED IF ALLOWED TO ENROLL AND OPEN *@

    <div class="col-sm-5">
        @if ((ActiveClass.MaxSeats ?? 0) > 0)
        {
            <span style="font-size: 1.3em;font-weight: bold;">@(ActiveClass.MaxSeats - SeatsTaken)</span>
            <span style="font-size: 1.2em;">&nbsp;open seats!</span>
            <br />
        }
        @{ var Conflict = DetectConflict(); }
        @if (!string.IsNullOrEmpty(Conflict))
        {
            <!-- NO ENROLLMENT DISPLAY -->
        } else if (CanEnroll)
        {   
            <p class="mt-2">Your price: <strong>$@string.Format("{0:0.00}", ThisUserCost)</strong></p>
            <button class="btn btn-success mt-1 mb-1" @onclick=EnrollClick>Enroll</button>
        } else
        {
            <p>A membership is required to enroll in this class.</p>
        }
        <br />
    </div>
    @if (!string.IsNullOrEmpty(Conflict))
    {
            <div class="alert alert-danger">@Conflict</div>
    }
    }
} else if ((
    // Only check both windows if the logged in user is member
    LoggedIn.IsMember
    && (ActiveClass.MemberEnrollmentStart != null || ActiveClass.NonMemberEnrollmentStart != null)
    && DateTime.Now > AbsoluteClose
) || (
    // For non-members, check only the non-member window
    !LoggedIn.IsMember
    && ActiveClass.NonMemberEnrollmentStart != null
    && DateTime.Now > NonMemberCloseDate
))
{
    @* DISPLAYED WHEN ENROLLMENT WINDOW HAS ELAPSED *@

    <p>Enrollment closed on</p>
    <h3>@((LoggedIn.IsMember ? AbsoluteClose : NonMemberCloseDate).ToLongDateString())</h3>
} else
{
    @* DISPLAYED WHEN ENROLLMENT IS NOT YET OPEN *@

    <p>

    This class opens for
    @if (LoggedIn.IsMember) { <span>members</span> }
    else { <span>non-members</span> }
    starting
    @if (ActiveClass.MemberEnrollmentStart is null && ActiveClass.NonMemberEnrollmentStart is null)
    { <h3>TBA</h3> }
    else if (LoggedIn.IsMember)
    { <h3>@(AbsoluteOpen.ToLongDateString())</h3> }
    else
    { <h3>@(ActiveClass.NonMemberEnrollmentStart?.ToLongDateString() ?? "TBA")</h3> }
    
    </p>
}
</div>

<h4 class="mt-2">Class Schedule</h4>
<hr class="margin: 0;" />
<ClassScheduler Class=ActiveClass ShowEditing=false @ref=Scheduler></ClassScheduler>

</div>
</div>

@* PAGE RIGHT COLUMN ENDS HERE *@
</div>
</div>

<PaymentModal @ref=PaymentScreen
    PaymentCallback="(Id) =>
    {
        EnrollWithPayment(Id);
    }" />

@code
{
    [CascadingParameter]
    protected SiteUserDBO LoggedIn { get; set; } = new();
    [Parameter]
    public string Id { get; set; } = "";

    protected ClassDBO ActiveClass { get; set; } = new();
    private int SeatsTaken;
    private PaymentModal? PaymentScreen;
    private BsModal? DropModal;
    private ClassScheduler? Scheduler;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ActiveClass = Classes.Class_GetById(int.Parse(Id!)).Get()!;
        SeatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
    }

    private string DetectConflict()
    {
        try
        {
            var UserSchedule = Classes.ClassSchedule_GetByUserId(LoggedIn.Id).Get()!;
            var ClassSchedule = Classes.ClassSchedule_List(ActiveClass.Id).Get()!;
            foreach (var Session in ClassSchedule)
            {
                ClassValidation.Validate(Session, UserSchedule);
            }
            return "";
        } catch (Exception Ex)
        {
            return Ex.Message;
        }
    }

    private void EnrollClick()
    {
        var ThisUserCost = ActiveClass.NonMemberPrice;
        if (LoggedIn.IsMember)
            ThisUserCost = ActiveClass.MemberPrice;
        if (ThisUserCost > 0.0f)
            PaymentScreen!.StartProcess(ThisUserCost);
        else
            EnrollWithPayment(null);
    }

    private void EnrollWithPayment(int? PaymentId)
    {
        SeatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
        var UserEnrollment = Classes.ClassEnrollment_GetByUserId(LoggedIn!.Id).Get()!;
        var _IsEnrolled = UserEnrollment.Find((It) => It.ClassId == ActiveClass.Id) is not null;
        if ((ActiveClass.MaxSeats != 0 && SeatsTaken >= ActiveClass.MaxSeats) || _IsEnrolled)
        {
            StateHasChanged();
            return;
        }

        Classes.Class_EnrollUser(ActiveClass.Id, LoggedIn!.Id, PaymentId);
        SeatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
        StateHasChanged();
    }

    private async Task<bool> DropDialogSubmit() => await Task.Run(() =>
    {
        var Result = Classes.Class_DropUser(ActiveClass.Id, LoggedIn!.Id);
        SeatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
        InvokeAsync(() => StateHasChanged());
        return Result.Success;
    });
}