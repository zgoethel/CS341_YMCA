@page "/Enroll/{Id}"

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject ClassRepository Classes
@inject Database Sql
@inject ClassValidationService ClassValidation

<PageTitle>@activeClass.ClassName</PageTitle>

@* CLASS DROP CONFIRMATION MODAL*@
<BsModal @ref=dropModal
    SubmitText="Drop"
    SubmitAction=DropDialogSubmit
    SubmitClass="danger">

    <Title>You are about to drop the class <strong>'@activeClass!.ClassName'</strong></Title>
    <Body>
        <p class="font-weight-bold">This action cannot be undone. Are you sure you wish to continue?</p>
        <ul class="text-danger">
            <li>You will no longer be enrolled in this class.</li>
            <li>The class fee will <strong>not</strong> be refunded.</li>
        </ul>
    </Body>
</BsModal>

<h1>@activeClass.ClassName</h1>
<hr />

<div class="row">
<div class="col-lg-7">
@* PAGE LEFT COLUMN BEGINS HERE *@

<h3>@activeClass.ShortDescription</h3>
<br />

@if (!string.IsNullOrEmpty(activeClass.FulfillCsv))
{
    <h4 style="display: inline;" class="me-4">

        @* REQ. CODE FULLFILLMENT LIST *@
        Fulfills: 
        @foreach (var Item in activeClass.FulfillCsv.Split(","))
        {
            <span class="ms-2 badge bg-info">@Item</span>
        }

    </h4>
}

@if (!string.IsNullOrEmpty(activeClass.RequireCsv))
{
    <h4 style="display: inline;">

        @* REQ. CODE REQUIREMENT LIST *@
        Prerequisites: 
        @foreach (var Item in activeClass.RequireCsv.Split(","))
        {
            <span class="ms-2 badge bg-secondary">@Item</span>
        }

    </h4>
}

@* LONG DESCRIPTION (SUPPORTS HTML) *@
@{
    // Replaces newlines with HTML newlines
    var DescriptionNewlines = (MarkupString)(activeClass.LongDescription.Replace("\n", "<br />"));
}
<p class="mt-4 col-11">@DescriptionNewlines</p>
<br />

@* CONFIGURABLE IMAGE *@
<img style="display: block;max-width: 86%;"
    class="mb-4"
    src="images/stock_photo.jpg"
    alt="Class image is missing" />

@* PAGE LEFT COLUMN ENDS HERE *@
</div>
<div class="col-lg-5">
@* PAGE RIGHT COLUMN BEGINS HERE *@

<h3>Enrollment Information</h3>
<p class="mb-4">Interested in this class? Continue reading to enroll.</p>

@* PRICING CARD *@
<div class="card mb-4">
<div class="card-header">Membership and Fees</div>
<div class="card-body">

@* DISPLAY WHO CAN ENROLL *@
@if(activeClass.AllowNonMembers)
{
    <p>
    Both members with paid memberships and public non-members
    may enroll and participate in this class.
    </p>
} else
{
    <p>
    This class is open only to those holding valid Y memberships.
    </p>
}
        
@* DISPLAY PRICING INFO *@
<div class="row mt-4">
<div class="col-sm-6" style="text-align: center;">

    @* MEMBER PRICING *@
    @if (activeClass.MemberPrice > 0.0)
    {
        <h1>$@((int?)activeClass.MemberPrice)<sup>@((activeClass.MemberPrice % 1)
            .ToString(".00").Replace(".", ""))</sup></h1>
    } else
    { <h1>No fee</h1> }
    <p>For membership holders</p>

</div>
@if (activeClass.AllowNonMembers)
{
    <div class="col-sm-6" style="text-align: center;">

        @* NON-MEMBER PRICING *@
        @if (activeClass.NonMemberPrice > 0.0)
        {
            <h1>$@((int?)activeClass.NonMemberPrice)<sup>@((activeClass.NonMemberPrice % 1)
                .ToString(".00").Replace(".", ""))</sup></h1>
        } else
        { <h1>No fee</h1> }
        <p>Without membership</p>

    </div>
} else
{
    @* DISPLAY LOCK IF MEMBERS NOT ALLOWED *@
    <div class="col-sm-6" style="text-align: center;">
        <h1><i class="oi oi-lock-locked"></i></h1>
        <p>Without membership</p>
    </div>
}
</div>

</div>
</div>

@* ENROLL ACTION CARD *@
<div class="card mb-4">
<div class="card-header">Open Seats</div>
<div class="card-body">

<div class="row">
<div class="col-sm-7 pt-2">

    @* LOCATION AND BASIC SCHEDULE INFO *@
    <p><strong>Holding sessions</strong><br />@@ @(activeClass.Location ?? "TBA")</p>
    @{
        var Sessions = Classes.ClassSchedule_List(activeClass.Id).Get()!;
        if (Sessions.Count == 0)
        {
            <p>No schedule available</p>
        } else
        {
            <p>Starting on @Sessions[0].FirstDate.ToLongDateString()</p>
        }
    }

</div>

@* CALCULATES SEVERAL DISPLAY VALUES INLINE *@
@* AVOID DOING THIS WITH DATABASE CALLS ON  *@
@* PAGES WHICH RE-RENDER                    *@
@{
    // Calculate window date values for use in display UI
    var memberCloseDate = (activeClass.MemberEnrollmentStart ?? DateTime.UnixEpoch)
        .AddDays(activeClass.MemberEnrollmentDays ?? 1);
    var nonMemberCloseDate = (activeClass.NonMemberEnrollmentStart ?? DateTime.UnixEpoch)
        .AddDays(activeClass.NonMemberEnrollmentDays ?? 1);
    // Determine the latest close date (for members)
    var absoluteClose = (nonMemberCloseDate > memberCloseDate)
        ? nonMemberCloseDate
        : memberCloseDate;
    var memberOpenDate = activeClass.MemberEnrollmentStart ?? DateTime.MaxValue;
    var nonMemberOpenDate = activeClass.NonMemberEnrollmentStart ?? DateTime.MaxValue;
    // Determine the earliest open date (for members)
    var absoluteOpen = (nonMemberOpenDate < memberOpenDate)
        ? nonMemberOpenDate
        : memberOpenDate;

    // Determine member/non-member ability to enroll in this class
    var thisUserCost = activeClass.NonMemberPrice;
    if (LoggedIn.IsMember)
        thisUserCost = activeClass.MemberPrice;
    var canEnroll = activeClass.AllowNonMembers || LoggedIn.IsMember;
    
    var userEnrollment = (LoggedIn.Id == 0)
        ? new()
        : Classes.ClassEnrollment_GetByUserId(LoggedIn!.Id).Get()!;
    var _isEnrolled = userEnrollment.Find((It) => It.ClassId == activeClass.Id) is not null;
}
@if (_isEnrolled)
{
    @* DISPLAYED WHEN ALREADY ENROLLED IN CLASS *@

    <span class="alert alert-success">
        <span style="padding-top: 0.3em;display: inline-block;">You are enrolled in this course!</span>
        <button class="btn btn-success"
            style="float: right;"
            @onclick="() => dropModal!.Open()">Drop</button>
    </span>
} else if (!activeClass.AllowEnrollment)
{
    @* DISPLAYED WHEN ENROLLMENT IS PAUSED *@

    <p>Enrollment is disabled at this time.</p>
} else if (
    (LoggedIn.IsMember && activeClass.MemberEnrollmentOpen)
    || activeClass.NonMemberEnrollmentOpen
)
{
    if  ((activeClass.MaxSeats ?? 0) != 0 && seatsTaken >= activeClass.MaxSeats)
    { <span class="alert alert-warning">Sorry, all seats are taken for this course!</span>}
    else if ((LoggedIn?.Id ?? 0) == 0)
    { <span class="alert alert-secondary">Please log in to enroll in courses.</span> }
    else
    {
        @* DISPLAYED IF ALLOWED TO ENROLL AND OPEN *@

        <div class="col-sm-5">
            @if ((activeClass.MaxSeats ?? 0) > 0)
            {
                <span style="font-size: 1.3em;font-weight: bold;">@(activeClass.MaxSeats - seatsTaken)</span>
                <span style="font-size: 1.2em;">&nbsp;open seats!</span>
                <br />
            }
            @{ var Conflict = DetectConflict(); }
            @if (!string.IsNullOrEmpty(Conflict))
            {
                @* NO ENROLLMENT DISPLAY *@
            } else if (canEnroll)
            {   
                <p class="mt-2">Your price: <strong>$@string.Format("{0:0.00}", thisUserCost)</strong></p>
                <button class="btn btn-success mt-1 mb-1" @onclick=EnrollClick>Enroll</button>
            } else
            {
                <p>A membership is required to enroll in this class.</p>
            }
            <br />
        </div>

        @* DISPLAYED IF THERE IS A CONFLICT *@
        @if (!string.IsNullOrEmpty(Conflict))
        { <div class="alert alert-danger">@Conflict</div> }
    }
} else if ((
    // Only check both windows if the logged in user is member
    LoggedIn.IsMember
    && (activeClass.MemberEnrollmentStart != null || activeClass.NonMemberEnrollmentStart != null)
    && DateTime.Now > absoluteClose
) || (
    // For non-members, check only the non-member window
    !LoggedIn.IsMember
    && activeClass.NonMemberEnrollmentStart != null
    && DateTime.Now > nonMemberCloseDate
))
{
    @* DISPLAYED WHEN ENROLLMENT WINDOW HAS ELAPSED *@

    <p>Enrollment closed on</p>
    <h3>@((LoggedIn.IsMember ? absoluteClose : nonMemberCloseDate).ToLongDateString())</h3>
} else
{
    @* DISPLAYED WHEN ENROLLMENT IS NOT YET OPEN *@

    <p>

    This class opens for
    @if (LoggedIn.IsMember) { <span>members</span> }
    else { <span>non-members</span> }
    starting
    @if (activeClass.MemberEnrollmentStart is null && activeClass.NonMemberEnrollmentStart is null)
    { <h3>TBA</h3> }
    else if (LoggedIn.IsMember)
    { <h3>@(absoluteOpen.ToLongDateString())</h3> }
    else
    { <h3>@(activeClass.NonMemberEnrollmentStart?.ToLongDateString() ?? "TBA")</h3> }
    
    </p>
}
</div>

@* CLASS FIRST WEEK SCHEDULE *@
<h4 class="mt-2">Class Schedule</h4>
<hr class="margin: 0;" />
<ClassScheduler Class=activeClass ShowEditing=false @ref=scheduler></ClassScheduler>

</div>
</div>

@* PAGE RIGHT COLUMN ENDS HERE *@
</div>
</div>

@* PAYMENT MODAL COMPONENT *@
<PaymentModal @ref=paymentScreen
    PaymentCallback="(Id) =>
    {
        EnrollWithPayment(Id);
    }" />

@code
{
    /// <summary>
    /// DBO of uUser that is currently logged in.
    /// </summary>
    [CascadingParameter]
    protected SiteUserDBO LoggedIn { get; set; } = new();

    /// <summary>
    /// ID of class whose details are displayed.
    /// </summary>
    [Parameter]
    public string Id { get; set; } = "";

    protected ClassDBO activeClass { get; set; } = new();
    private int seatsTaken;
    private PaymentModal? paymentScreen;
    private BsModal? dropModal;
    private ClassScheduler? scheduler;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Load open class from database
        activeClass = Classes.Class_GetById(int.Parse(Id!)).Get()!;
        // Count number of taken seats
        seatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
    }

    /// <summary>
    /// Validates the user's schedule against the class'.
    /// </summary>
    /// <returns>Any conflicts as an error message.</returns>
    private string DetectConflict()
    {
        try
        {
            // Load both sets of sessions
            var userSchedule = Classes.ClassSchedule_GetByUserId(LoggedIn.Id).Get()!;
            var classSchedule = Classes.ClassSchedule_List(activeClass.Id).Get()!;
            // Iterate through class sessions
            foreach (var session in classSchedule)
            {
                // Validate each against user schedule
                ClassValidation.Validate(session, userSchedule);
            }
            return "";
        } catch (Exception ex)
        {
            // Return exception message as validation warning
            return ex.Message;
        }
    }

    /// <summary>
    /// Called when enrollment button clicked to show payment modal.
    /// </summary>
    private void EnrollClick()
    {
        // Check what the user owes
        var thisUserCost = activeClass.NonMemberPrice;
        if (LoggedIn.IsMember)
            thisUserCost = activeClass.MemberPrice;
        // Show modal if costs money, or just enroll
        if (thisUserCost > 0.0f)
            paymentScreen!.StartProcess(thisUserCost);
        else
            EnrollWithPayment(null);
    }

    /// <summary>
    /// Completes the enrollment, associated with a possible payment.
    /// </summary>
    /// <param name="paymentId">ID of payment, or null for none.</param>
    private void EnrollWithPayment(int? paymentId)
    {
        // Count seats to ensure valid enrollment
        seatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
        var userEnrollment = Classes.ClassEnrollment_GetByUserId(LoggedIn!.Id).Get()!;
        var _isEnrolled = userEnrollment.Find((It) => It.ClassId == activeClass.Id) is not null;
        if ((activeClass.MaxSeats != 0 && seatsTaken >= activeClass.MaxSeats) || _isEnrolled)
        {
            // Bail out if can no longer enroll
            StateHasChanged();
            return;
        }

        // Perform enrollment and update state
        Classes.Class_EnrollUser(activeClass.Id, LoggedIn!.Id, paymentId);
        seatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
        StateHasChanged();
    }

    /// <summary>
    /// Called when the drop dialog is accepted to perform drop.
    /// </summary>
    /// <returns></returns>
    private async Task<bool> DropDialogSubmit() => await Task.Run(() =>
    {
        // Drop the user from the class
        var result = Classes.Class_DropUser(activeClass.Id, LoggedIn!.Id);
        // Recalculate taken seats
        seatsTaken = Classes.ClassEnrollment_GetByClassId(int.Parse(Id!)).Get()!.Count;
        InvokeAsync(() => StateHasChanged());
        return result.Success;
    });
}