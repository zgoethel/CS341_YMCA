@using CS341_YMCA.Controllers
@using CS341_YMCA.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Data.SqlClient
@using System.Security.Cryptography
@using System.Text

@page "/SiteUser/ResetPasswordFlow"
@layout SimplifiedLayout

@inject NavigationManager Nav
@inject Database Sql

<PageTitle>Password Reset</PageTitle>

@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="alert alert-danger">@ValidationMessage</div>
}

@if(string.IsNullOrEmpty(ErrorMessage))
{
    <p>Test @FormBind.Password -> @PasswordHash</p>
    <EditForm Model=FormBind>
        <div class="row">
            <div class="col-4">
                <label>New Password</label><br />
                <InputText class="form-control" type="password" @bind-Value=FormBind.Password @onchange=StateHasChanged  />
            </div>
        </div>
        <div class="row">
            <div class="col-4">
                <label>New Password (again)</label><br />
                <InputText class="form-control" type="password" @bind-Value=FormBind.PasswordRepeat @onchange=StateHasChanged />
            </div>
        </div>

        <button type="submit" @onclick=SubmitPasswordReset>Set Password</button>
    </EditForm>
} else
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private string CreateSHAHash(string Password)
    {
        var HashTool = SHA512.Create();
        Byte[] PhraseAsByte = Encoding.UTF8.GetBytes(string.Concat(Password));
        Byte[] EncryptedBytes = HashTool.ComputeHash(PhraseAsByte);
        HashTool.Clear();

        return Convert.ToBase64String(EncryptedBytes);
    }

    private class FormBinding
    {
        [Required]
        public string Password = "";

        [Required]
        public string PasswordRepeat = "";
    }

    private FormBinding FormBind = new();
    private Guid ResetToken;
    private string ErrorMessage = "";
    private string ValidationMessage = "";
    private string PasswordHash => CreateSHAHash(FormBind.Password);

    protected override void OnInitialized()
    {
        var Uri = Nav.ToAbsoluteUri(Nav.Uri);

        try
        {
            QueryHelpers.ParseQuery(Uri.Query).TryGetValue("ResetToken", out var _ResetToken);
            ResetToken = Guid.Parse(_ResetToken);
        } catch (Exception Ex)
        {
            ErrorMessage = "Could not parse the provided reset token value";
        }
    }

    private void SubmitPasswordReset()
    {
        if (string.IsNullOrEmpty(FormBind.Password))
        {
            ValidationMessage = "Please provide a password";
            return;
        } else if (FormBind.Password != FormBind.PasswordRepeat)
        {
            ValidationMessage = "Passwords do not match";
            return;
        }

        try
        {
            Sql.ExecuteProcedure<object>("SiteUser_ResetPassword", new SiteUserResetPasswordRequest()
            {
                ResetToken = ResetToken,
                PasswordHash = PasswordHash
            }, ((_) => { }));

            Nav.NavigateTo("/SiteUser/LoginFlow");
        } catch (SqlException Ex)
        {
            ErrorMessage = Ex.Message;
        }
    }
}