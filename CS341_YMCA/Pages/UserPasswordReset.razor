@using CS341_YMCA.Controllers
@using CS341_YMCA.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Data.SqlClient
@using System.Security.Cryptography
@using System.Text

@page "/SiteUser/ResetPasswordFlow"
@layout SimplifiedLayout

@inject NavigationManager Nav
@inject Database Sql
@inject IHttpContextAccessor Con
@inject LinkGenerator Links

<PageTitle>Password Reset</PageTitle>

@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="alert alert-danger">@ValidationMessage</div>
}

@if(string.IsNullOrEmpty(ErrorMessage))
{
    <div style="max-width: 30em;">
        <h2>Password Reset</h2>

        <p class="mt-4">
            Please provide a new password for your account. Once submitted,
            you can use this password to sign into your account.
        </p>
    </div>
        
    <EditForm Model=FormBind style="max-width: 27em;">
        <label>New Password:</label>
        <InputText class="form-control mb-2"
            type="password"
            @bind-Value=FormBind.Password
            @onchange=StateHasChanged />

        <label>New Password (again):</label>
        <InputText class="form-control"
            type="password" 
            @bind-Value=FormBind.PasswordRepeat
            @onchange=StateHasChanged />

        <button class="btn btn-primary mt-4" type="submit" @onclick=SubmitPasswordReset>Set Password</button>
    </EditForm>
} else
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private string CreateSHAHash(string Password)
    {
        var HashTool = SHA512.Create();
        Byte[] PhraseAsByte = Encoding.UTF8.GetBytes(string.Concat(Password));
        Byte[] EncryptedBytes = HashTool.ComputeHash(PhraseAsByte);
        HashTool.Clear();

        return Convert.ToBase64String(EncryptedBytes);
    }

    private class FormBinding
    {
        [Required]
        public string Password = "";

        [Required]
        public string PasswordRepeat = "";
    }

    private FormBinding FormBind = new();
    private Guid ResetToken;
    private string ErrorMessage = "";
    private string ValidationMessage = "";
    private string PasswordHash => CreateSHAHash(FormBind.Password);

    protected override void OnInitialized()
    {
        var Uri = Nav.ToAbsoluteUri(Nav.Uri);

        try
        {
            QueryHelpers.ParseQuery(Uri.Query).TryGetValue("ResetToken", out var _ResetToken);
            ResetToken = Guid.Parse(_ResetToken);
        } catch (Exception)
        {
            ErrorMessage = "Could not parse the provided reset token value.";
        }
    }

    private void SubmitPasswordReset()
    {
        if (string.IsNullOrEmpty(FormBind.Password))
        {
            ValidationMessage = "Please provide a password below.";
            return;
        } else if (FormBind.Password != FormBind.PasswordRepeat)
        {
            ValidationMessage = "Passwords do not match!";
            return;
        }

        try
        {
            Sql.ExecuteProcedure<object>("SiteUser_ResetPassword", new SiteUserResetPasswordRequest()
            {
                ResetToken = ResetToken,
                PasswordHash = PasswordHash
            }, ((_) => { }));

            var HttpContext = Con.HttpContext ?? throw new Exception("There is no active HTTP context.");
            Nav.NavigateTo(Links.GetUriByAction(HttpContext, "LoginFlow", "SiteUser") ?? "/");
        } catch (SqlException Ex)
        {
            ValidationMessage = Ex.Message;
        }
    }
}