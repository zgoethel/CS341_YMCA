@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Data.SqlClient
@using System.Security.Cryptography
@using System.Text

@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@page "/SiteUser/ResetPasswordFlow"
@layout SimplifiedLayout

@inject NavigationManager Nav
@inject Database Sql
@inject IHttpContextAccessor Con
@inject LinkGenerator Links
@inject SiteUserRepository SiteUsers

<PageTitle>Password Reset</PageTitle>

@if (!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="alert alert-danger">@ValidationMessage</div>
}

@if(string.IsNullOrEmpty(ErrorMessage))
{
    <h2>Password Reset</h2>

    <p class="mt-4">
        Please provide a new password for your account. Once submitted,
        you can use this password to sign into your account.
    </p>
        
    <EditForm Model=FormBind>
        <label>New Password:</label>
        <InputText class="form-control mb-2"
            type="password"
            @bind-Value=FormBind.Password />

        <label>New Password (again):</label>
        <InputText class="form-control"
            type="password" 
            @bind-Value=FormBind.PasswordRepeat />

        <button class="btn btn-primary mt-4" type="submit" @onclick=SubmitPasswordReset>Set Password</button>
    </EditForm>
} else
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@code {
    private class FormBinding
    {
        [Required]
        public string Password = "";

        [Required]
        public string PasswordRepeat = "";
    }

    private FormBinding FormBind = new();
    private Guid ResetToken;
    private string ErrorMessage = "";
    private string ValidationMessage = "";
    private string PasswordHash => FormBind.Password.CalculateSha512();

    protected override void OnInitialized()
    {
        var Uri = Nav.ToAbsoluteUri(Nav.Uri);

        try
        {
            QueryHelpers.ParseQuery(Uri.Query).TryGetValue("ResetToken", out var _ResetToken);
            ResetToken = Guid.Parse(_ResetToken);
        } catch (Exception)
        {
            ErrorMessage = "Could not parse the provided reset token value.";
        }
    }

    private void SubmitPasswordReset()
    {
        if (string.IsNullOrEmpty(FormBind.Password))
        {
            ValidationMessage = "Please provide a password below.";
            return;
        } else if (FormBind.Password != FormBind.PasswordRepeat)
        {
            ValidationMessage = "Passwords do not match!";
            return;
        }

        var Result = SiteUsers.SiteUser_ResetPassword(ResetToken, PasswordHash);
        
        if (Result.Success)
        {
            var Path = Links.GetPathByAction(Con.HttpContext!, "LoginFlow", "SiteUser");
            Nav.NavigateTo(Path!);
        } else
        {
            ValidationMessage = Result.Error!;
        }
    }
}