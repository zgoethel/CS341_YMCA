@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using System.Data.SqlClient
@using System.Security.Cryptography
@using System.Text

@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@page "/SiteUser/ResetPasswordFlow"
@layout SimplifiedLayout

@inject NavigationManager Nav
@inject DatabaseService Sql
@inject IHttpContextAccessor Con
@inject LinkGenerator Links
@inject SiteUserRepository SiteUsers

<PageTitle>Password Reset</PageTitle>

@* DISPLAY VALIDATION ERROR IF IT EXISTS *@
@if (!string.IsNullOrEmpty(validationMessage))
{
    <div class="alert alert-danger">@validationMessage</div>
}

@* DISPLAY UI IF ERROR IS BLANK *@
@if(string.IsNullOrEmpty(errorMessage))
{
    <h2>Password Reset</h2>

    <p class="mt-4">
        Please provide a new password for your account. Once submitted,
        you can use this password to sign into your account.
    </p>
        
    <EditForm Model=formBind>

        @* PASSWORD FIRST ENTRY *@
        <label>New Password:</label>
        <InputText class="form-control mb-2"
            type="password"
            @bind-Value=formBind.Password />

        @* PASSWORD REPEATED ENTRY *@
        <label>New Password (again):</label>
        <InputText class="form-control"
            type="password" 
            @bind-Value=formBind.PasswordRepeat />

        @* RESET SUBMIT BUTTON *@
        <button class="btn btn-primary mt-4" type="submit" @onclick=SubmitPasswordReset>Set Password</button>
    
    </EditForm>
} else
{
    @* DISPLAY ERROR MESSAGE IF EXISTS *@
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    /// <summary>
    /// Layout of bound form data.
    /// </summary>
    private class FormBinding
    {
        [Required]
        public string Password = "";

        [Required]
        public string PasswordRepeat = "";
    }

    /// <summary>
    /// Form-bound object instance.
    /// </summary>
    private FormBinding formBind = new();

    private Guid resetToken;
    private string errorMessage = "";
    private string validationMessage = "";
    private string passwordHash => formBind.Password.CalculateSha512();

    protected override void OnInitialized()
    {
        try
        {
            // Parse the reset GUID token from the request URI
            var uri = Nav.ToAbsoluteUri(Nav.Uri);
            QueryHelpers.ParseQuery(uri.Query).TryGetValue("ResetToken", out var _resetToken);
            resetToken = Guid.Parse(_resetToken);
        } catch (Exception)
        {
            errorMessage = "Could not parse the provided reset token value.";
        }
    }

    /// <summary>
    /// Called after the reset form is submitted.
    /// </summary>
    private void SubmitPasswordReset()
    {
        // Validate provided details
        if (string.IsNullOrEmpty(formBind.Password))
        {
            validationMessage = "Please provide a password below.";
            return;
        } else if (formBind.Password != formBind.PasswordRepeat)
        {
            validationMessage = "Passwords do not match!";
            return;
        }
        // Perform the reset
        var result = SiteUsers.SiteUser_ResetPassword(resetToken, passwordHash);

        if (result.Success)
            // Return to login page
            Nav.NavigateTo("SiteUser/LoginFlow");
        else
        {
            validationMessage = result.Error!;
            StateHasChanged();
        }
    }
}