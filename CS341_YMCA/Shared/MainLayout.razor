@using CS341_YMCA.Data
@using CS341_YMCA.Controllers

@inherits LayoutComponentBase

@inject LinkGenerator Links
@inject NavigationManager Nav
@inject Database Sql
@inject AuthenticationStateProvider AuthState
@inject IHttpContextAccessor Con
@inject SiteUserController SiteUsers

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedStorage

<PageTitle>YMCA Enrollment Portal</PageTitle>

@*<AuthorizeView>
<Authorized>*@
    <style>
        body
        {
            font-family: system-ui;
        }
    </style>

    <div class="page">
        <CascadingValue Value=LoggedIn>
            <div class="sidebar">
                <NavMenu />
            </div>

            <main>
                <article class="content px-4 mb-4">
                    @Body
                </article>
            </main>
        </CascadingValue>
    </div>
@*</Authorized>
<NotAuthorized>

</NotAuthorized>
</AuthorizeView>*@

@code {
    [CascadingParameter]
    protected Task<AuthenticationState>? Auth { get; set; }

    protected SiteUserDBO LoggedIn { get; set; } = new();
    protected bool Authenticated => Auth!.Result.User.Identity!.IsAuthenticated;

    protected override async Task OnAfterRenderAsync(bool FirstRender)
    {
        await base.OnAfterRenderAsync(FirstRender);

        if (FirstRender && !Authenticated)
        {
            try
            {
                var SessionKey = await ProtectedStorage.GetAsync<string?>("SessionKey");
                if (SessionKey.Value != null)
                {
                    var SessionName = await ProtectedStorage.GetAsync<string>("SessionName");
                    ((AuthStateProvider)AuthState).LogIn(SessionName.Value!, SessionKey.Value!);
                }
            } catch (Exception Ex)
            {
                Console.WriteLine("Something went wrong while reading session storage");
                Console.WriteLine(Ex.ToString());
            }

            StateHasChanged();
        }

        if (FirstRender && Authenticated)
        {
            LoggedIn = SiteUsers.SiteUser_GetByEmail(Auth!.Result.User.Identity!.Name!).Get()!;
            StateHasChanged();
        } else if (!Authenticated)
        {
            //var Path = Links.GetPathByAction(Con.HttpContext!, "LoginFlow", "SiteUser");
            //Nav.NavigateTo(Path!);
            LoggedIn = new();
            StateHasChanged();
        }
    }
}