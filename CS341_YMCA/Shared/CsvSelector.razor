@using System.Text.RegularExpressions

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject IJSRuntime Js

<h3 style="white-space: break-spaces;">
    @foreach (var Item in Selected)
    {
        <span class="badge bg-secondary me-2 mt-2">
            @Item&nbsp;
            <i class="oi oi-trash" @onclick="() => { OnRemoveClick(Item); }" style="cursor: pointer;"></i>
        </span>
    }

    <select class="form-control return-to-n1"
        @onchange="(Event) =>
        {
            OnAddSelectorChange(Event.Value?.ToString() ?? (-1).ToString());
        }"
        style="width:5em;display: inline-block;padding-bottom: 0.2em;">
        
        <option value="-1" selected hidden>Add +</option>
        <option value="-2">Create new code</option>
        @foreach (var Option in NotSelected)
        {
            <option value=@Option>@Option</option>
        }
    </select>
</h3>

<BsModal @ref=AddCodeModal
    SubmitAction=AddCodeSubmit>

    <Title>Add a new requirement code</Title>
    <Body>

    <EditForm Model=_Bind>
        
    @if (!string.IsNullOrEmpty(ValidationMessage))
    {
        <div class="alert alert-danger">@ValidationMessage</div>
    }
    <InputText class="form-control" @bind-Value=_Bind.Value />
    <span><i>(Use alphanumeric characters)</i></span>

    </EditForm>
    </Body>
</BsModal>

@code
{
    private class BindModel
    {
        public string Value { get; set; } = "";
    }
    private BindModel _Bind = new();

    [Parameter]
    public string? Csv { get; set; }
    [Parameter]
    public List<string> Exclude { get; set; } = new();
    [Parameter]
    public List<string> Items { get; set; } = new();
    [Parameter]
    public Action? Callback { get; set; }

    public List<string> Selected = new();
    private List<string> NotSelected = new();
    private string ValidationMessage = "";
    private BsModal? AddCodeModal;

    private async Task<bool> AddCodeSubmit() => await Task.Run(() =>
    {
        if (!Regex.IsMatch(_Bind.Value, "^[A-Za-z0-9]+$"))
        {
            ValidationMessage = "Please enter an alphanumeric class code.";
            InvokeAsync(() => StateHasChanged());

            return false;
        }

        var _Upper = _Bind.Value.ToUpper();

        if (Selected.Contains(_Upper))
        {
            return false;
        }

        Selected.Add(_Upper);
        if (NotSelected.Contains(_Upper)) NotSelected.Remove(_Upper);

        ValidationMessage = "";
        _Bind.Value = "";
        Csv = String.Join(',', Selected);

        InvokeAsync(() => StateHasChanged());

        return true;
    });

    protected override void OnInitialized()
    {
        var _Selected = Csv!.Split(",").ToHashSet();
        Selected = Items.FindAll((It) => _Selected.Contains(It) && !Exclude.Contains(It));
        NotSelected = Items.FindAll((It) => !_Selected.Contains(It) && !Exclude.Contains(It));
    }

    private void OnRemoveClick(string Item)
    {
        Selected.Remove(Item);
        NotSelected.Add(Item);
        Csv = string.Join(',', Selected);

        StateHasChanged();
        if (Callback != null) Callback();
    }

    private void OnAddSelectorChange(string Item)
    {
        if (Item == "-1") return;
        if (Item == "-2")
            AddCodeModal!.Open();
        else
        {
            Selected.Add(Item);
            NotSelected.Remove(Item);
            Csv = string.Join(',', Selected);
        }

        Js.InvokeVoidAsync("InteropImpl.returnSelectsToZero");
        StateHasChanged();
        if (Callback != null) Callback();
    }
}
