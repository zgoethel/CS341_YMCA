@using System.Text.RegularExpressions

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject IJSRuntime Js

<h3 style="white-space: break-spaces;">

    @* SHOW SELECTED ITEMS IN CSV *@
    @foreach (var Item in selected)
    {
        <span class="badge bg-secondary me-2 mt-2">
            @Item&nbsp;

            @* ITEM DELETE BUTTON *@
            <i class="oi oi-trash" @onclick="() => { OnRemoveClick(Item); }" style="cursor: pointer;"></i>
        </span>
    }

    @* "ADD" SELECT DROPDOWN *@
    <select class="form-control return-to-n1"
        @onchange="(Event) =>
        {
            OnAddSelectorChange(Event.Value?.ToString() ?? (-1).ToString());
        }"
        style="width:5em;display: inline-block;padding-bottom: 0.2em;">
        
        @* HIDDEN DEFAULT FOR DISPLAY *@
        <option value="-1" selected hidden>Add +</option>
        @* CONTROL OPTION FOR ADDING NEW CSV ITEM *@
        <option value="-2">Create new code</option>

        @* ADD IN ITEMS FROM LIST *@
        @foreach (var Option in notSelected)
        {
            <option value=@Option>@Option</option>
        }
    </select>
</h3>

@* ADD CODE MODAL FOR CREATING CSV ENTRY *@
<BsModal @ref=addCodeModal
    SubmitAction=AddCodeSubmit>

    <Title>Add a new requirement code</Title>
    <Body>

    <EditForm Model=formBind>
    
    @* DISPLAY VALIDATION MESSAGE IF IT EXISTS*@
    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-danger">@validationMessage</div>
    }

    @* CODE INPUT FIELD *@
    <InputText class="form-control" @bind-Value=formBind.Value />
    <span><i>(Use alphanumeric characters)</i></span>

    </EditForm>
    </Body>
</BsModal>

@code
{
    /// <summary>
    /// Layout of bound form data.
    /// </summary>
    private class BindModel
    {
        public string Value { get; set; } = "";
    }

    /// <summary>
    /// Form-bound object instance.
    /// </summary>
    private BindModel formBind = new();

    /// <summary>
    /// Initially selected CSV for the items.
    /// </summary>
    [Parameter]
    public string? Csv { get; set; }

    /// <summary>
    /// Items to ignore entirely from the options (e.g., a class shouldn't
    /// require itself).
    /// </summary>
    [Parameter]
    public List<string> Exclude { get; set; } = new();

    /// <summary>
    /// Items from which to select (strings).
    /// </summary>
    [Parameter]
    public List<string> Items { get; set; } = new();

    /// <summary>
    /// Called when an item is selected with the name of the item.
    /// </summary>
    [Parameter]
    public Action? Callback { get; set; }

    public List<string> selected = new();
    private List<string> notSelected = new();
    private string validationMessage = "";
    private BsModal? addCodeModal;

    /// <summary>
    /// Called when the modal is submitted to create a new code.
    /// </summary>
    /// <returns>Whether the modal should close.</returns>
    private async Task<bool> AddCodeSubmit() => await Task.Run(() =>
    {
        // Check format of provided item
        if (!Regex.IsMatch(formBind.Value, "^[A-Za-z0-9]+$"))
        {
            validationMessage = "Please enter an alphanumeric class code.";
            InvokeAsync(() => StateHasChanged());

            return false;
        }
        // Convert to upper case for consistency
        var _upper = formBind.Value.ToUpper();

        // Don't do anythin gif the item is already selected
        if (selected.Contains(_upper))
        {
            return false;
        }
        // Add to selected list
        selected.Add(_upper);
        // Remove from not-selected list
        if (notSelected.Contains(_upper)) notSelected.Remove(_upper);

        // Reset modal state
        validationMessage = "";
        formBind.Value = "";
        // Regenerate item CSV from selected list
        Csv = String.Join(',', selected);

        InvokeAsync(() => StateHasChanged());

        return true;
    });

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Convert selected list to hash set for "contains" checks
        var _selected = Csv!.Split(",").ToHashSet();
        // Create selected/not-selected lists
        selected = Items.FindAll((It) => _selected.Contains(It) && !Exclude.Contains(It));
        notSelected = Items.FindAll((It) => !_selected.Contains(It) && !Exclude.Contains(It));
    }

    /// <summary>
    /// Removes the provided item from the set of selected items.
    /// </summary>
    /// <param name="item">CSV item to remove from the selected list.</param>
    private void OnRemoveClick(string item)
    {
        selected.Remove(item);
        notSelected.Add(item);
        // Regenerate CSV from selected list
        Csv = string.Join(',', selected);

        StateHasChanged();
        // Notify parent of update
        if (Callback != null) Callback();
    }
    
    /// <summary>
    /// Adds an item to the set of selected items or performs an action.
    /// </summary>
    /// <param name="item">CSV item to ad to the selected list.</param>
    private void OnAddSelectorChange(string item)
    {
        // Handle special actions (-1 = ignore)
        if (item == "-1") return;
        // (-2 = open create modal)
        if (item == "-2")
            addCodeModal!.Open();
        else
        {
            // Normal behavior; add item to list
            selected.Add(item);
            notSelected.Remove(item);
            // Regenerate CSV from selected list
            Csv = string.Join(',', selected);
        }

        // Resets the selector to "Add +"
        Js.InvokeVoidAsync("InteropImpl.returnSelectsToZero");
        StateHasChanged();
        // Notify parent of update
        if (Callback != null) Callback();
    }
}
