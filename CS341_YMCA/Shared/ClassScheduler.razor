@using CS341_YMCA.Helpers
@using CS341_YMCA.Services
@using CS341_YMCA.Pages

@inject ClassRepository Classes

@if(!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="alert alert-warning">
        @ValidationMessage
    </div>
}

@if (HasMoreRight)
{
    <h4 class="ms-4 me-4 text-info"
        style="float: right;cursor: pointer;"
        @onclick="() =>
        {
            WeekStart = WeekStart.AddDays(7);
            HasMoreRight = false;
            StateHasChanged();
        }">
    <span class="badge bg-info" style="display: inline;">MORE</span>
    <i class="ms-2 oi oi-chevron-right" /></h4>
} else
{
    <h4 class="ms-4 me-4"
        style="float: right;cursor: pointer;">
    <i class="oi oi-chevron-right"
        style="cursor: pointer;"
        @onclick="() => { WeekStart = WeekStart.AddDays(7); }"
    /></h4>
}

<h4 class="mt-1 me-4">
<i class="oi oi-chevron-left"
    style="cursor: pointer;"
    @onclick="() => { WeekStart = WeekStart.AddDays(-7); }"
/>
    Week of @WeekStart.ToLongDateString().Replace("Sunday, ", "")
</h4>

@{
    string[] _Days = { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };
}

<div class="_col-no-margin mt-1">
    @for (int j = 0; j < 7; j++)
    {
        <div style="width: 14%;" class="col">
            <h3>@_Days[j]</h3>
            <ClassScheduleDay
                Class=@Class
                Schedule=@Schedule
                Date=@WeekStart.AddDays(j)
                ShowEditing=ShowEditing
            />
        </div>
    }
</div>


@code
{
    [Parameter]
    public ClassDBO Class { get; set; } = new();
    [Parameter]
    public bool ShowEditing { get; set; } = false;
    [Parameter]
    public ManageClass Manager { get; set; } = new();

    private List<ClassScheduleDBO> Schedule = new();
    private string ValidationMessage = "";
    private DateTime WeekStart = DateTime.Today;
    private bool HasMoreRight = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Schedule = Classes.ClassSchedule_List(Class!.Id).Get()!;

        var _WeekStart = Schedule.FirstOrDefault()?.FirstDate ?? DateTime.Today;
        var Offset = -(int)_WeekStart.DayOfWeek;
        WeekStart = _WeekStart.AddDays(Offset);

        HasMoreRight = Schedule.Find((It) =>
            {
                return It.FirstDate.AddDays(It.Recurrence * It.Occurrences) >= WeekStart.AddDays(7);
            }) != null;
    }

    private void OnAddClick()
    {
        var Created = new ClassScheduleDBO();
        Schedule.Add(Created);

        StateHasChanged();
    }
}

<style>
    div._col-no-margin .col
    {
        margin-left: 0 !important;
        margin-right: 0 !important;
        padding: 0.2em;
        min-width: 6.5em;
        max-width: 14%;
        display: inline-block;
        vertical-align: top;
    }
</style>