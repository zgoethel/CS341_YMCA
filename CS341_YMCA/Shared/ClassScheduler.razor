@using CS341_YMCA.Helpers
@using CS341_YMCA.Services
@using CS341_YMCA.Pages

@inject ClassRepository Classes

@if(!string.IsNullOrEmpty(validationMessage))
{
    <div class="alert alert-warning">
        @validationMessage
    </div>
}

@if (hasMoreRight)
{

    @* "MORE TO RIGHT" HINT BUTTON *@
    <h4 class="ms-4 me-4 text-info"
        style="float: right;cursor: pointer;"
        @onclick="() =>
        {
            weekStart = weekStart.AddDays(7);
            hasMoreRight = false;
            StateHasChanged();
        }">
    <span class="badge bg-info" style="display: inline;">MORE</span>
    <i class="ms-2 oi oi-chevron-right" /></h4>

} else
{
    @* NEXT PAGE BUTTON *@
    <h4 class="ms-4 me-4"
        style="float: right;cursor: pointer;">
    <i class="oi oi-chevron-right"
        style="cursor: pointer;"
        @onclick="() => { weekStart = weekStart.AddDays(7 * NumWeeks); }"
    /></h4>
}

@* LAST PAGE BUTTON *@
<h4 class="mt-1 me-4">
<i class="oi oi-chevron-left"
    style="cursor: pointer;"
    @onclick="() => { weekStart = weekStart.AddDays(-7 * NumWeeks); }"
/>
@* WEEK TITLE *@
    Week of @weekStart.ToLongDateString().Replace("Sunday, ", "")
</h4>

@{
    // List of weekday labels
    string[] _Days = { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };
}
@* ITERATE THROUGH WEEKS (DEFAULT 1) *@
@for (int k = 0; k < NumWeeks; k++)
{
<div class="_col-no-margin mt-1">
    @* ITERATE THROUGH DAYS (7) *@
    @for (int j = 0; j < 7; j++)
    {
        <div style="width: 14%;" class="col">

            @* DISPLAY DAY LABELS ON FIRST ROW ONLY *@
            @if (k == 0) { <h3>@_Days[j]</h3> }

            @* CLASS SCHEDULE DAY COMPONENT *@
            <ClassScheduleDay Class=@Class
                Schedule=@schedule
                Date=@weekStart.AddDays(k * 7 + j)
                ShowEditing=ShowEditing
                UpdateCallback="() =>
                {
                    InvokeAsync(() => StateHasChanged());
                }"
                DisplayClassTitles=DisplayClassTitles
                DeleteIds=deleteIds
            />

        </div>
    }
</div>
}

@code
{
    /// <summary>
    /// Class open in the scheduler.
    /// </summary>
    [Parameter]
    public ClassDBO Class { get; set; } = new();

    /// <summary>
    /// Whether to show editing controls or just view.
    /// </summary>
    [Parameter]
    public bool ShowEditing { get; set; } = false;

    /// <summary>
    /// Number of weeks to display (default 1).
    /// </summary>
    [Parameter]
    public int NumWeeks { get; set; } = 1;

    // Following flags are specific to read-only mode
    [Parameter]
    public int DisplayUserSched { get; set; } = 0;
    [Parameter]
    public bool DisplayClassTitles { get; set; } = false;
    [Parameter]
    public bool OverrideDateFocus { get; set; } = false;

    public List<ClassScheduleDBO> schedule = new();
    private string validationMessage = "";
    private DateTime weekStart = DateTime.Today;
    private bool hasMoreRight = false;
    private List<int> deleteIds = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Pick different schedule subsets depending on flag
        schedule = (DisplayUserSched == 0)
            // Choose class schedule if not for user's schedule
            ? Classes.ClassSchedule_List(Class!.Id).Get()!
            // Choose user's schedule based on enrollment
            : Classes.ClassSchedule_GetByUserId(DisplayUserSched).Get()!;

        // Attempt to target the calendar to the week of class start
        var _weekStart = schedule.FirstOrDefault()?.FirstDate ?? DateTime.Today;
        // If overridden, show this week
        if (OverrideDateFocus) _weekStart = DateTime.Today;
        // Reset the date to the Sunday of the same week
        var offset = -(int)_weekStart.DayOfWeek;
        weekStart = _weekStart.AddDays(offset);

        @*
        HasMoreRight = Schedule.Find((It) =>
        {
            return It.FirstDate.AddDays(It.Recurrence * It.Occurrences) >= WeekStart.AddDays(7 * NumWeeks);
        }) != null;
        *@
    } 

    /// <summary>
    /// Saves all schedule entries and actually deletes soft deleted records.
    /// </summary>
    public void Save()
    {
        // Delete all schedule entries in CSV
        Classes.ClassSchedule_DeleteByIds(string.Join(',', deleteIds.Select((It) => It.ToString()))).Get();

        // Save each session individually
        foreach (var session in schedule)
        {
            // Remove bogus IDs from new entities
            if (session.Id < 0) session.Id = null;
            var Result = Classes.ClassSchedule_Set(
                Id: session.Id,
                ClassId: Class.Id,
                FirstDate: session.FirstDate,
                Recurrence: session.Recurrence,
                Occurrences: session.Occurrences,
                Duration: session.Duration
            );
            // Write back created (or returned) ID
            session.Id = Result.Get()!;
        }
    }
}

<style>
    div._col-no-margin .col
    {
        margin-left: 0 !important;
        margin-right: 0 !important;
        padding: 0.2em;
        min-width: 6.5em;
        max-width: 14%;
        display: inline-block;
        vertical-align: top;
    }
    div.schedule-day-block
    {
        padding: 0.5em;
        border: 1px solid grey;
        border-radius: 0.6em;
        box-shadow: 0 0 0.3em 0.3em #c2c2c2;
        border-left: 0.4em solid green;
        min-height: 10.8em;
        padding-bottom: 0;
    }
    .oi-chevron-top
    {
        padding-left: 2em;
    }
    .bootstrap-datetimepicker-widget table td span
    {
        display: inline;
    }
</style>