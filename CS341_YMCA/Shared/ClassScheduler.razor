@using CS341_YMCA.Helpers
@using CS341_YMCA.Services
@using CS341_YMCA.Pages

@inject ClassRepository Classes

@if(!string.IsNullOrEmpty(ValidationMessage))
{
    <div class="alert alert-warning">
        @ValidationMessage
    </div>
}

@if (HasMoreRight)
{
    <h4 class="ms-4 me-4 text-info"
        style="float: right;cursor: pointer;"
        @onclick="() =>
        {
            WeekStart = WeekStart.AddDays(7);
            HasMoreRight = false;
            StateHasChanged();
        }">
    <span class="badge bg-info" style="display: inline;">MORE</span>
    <i class="ms-2 oi oi-chevron-right" /></h4>
} else
{
    <h4 class="ms-4 me-4"
        style="float: right;cursor: pointer;">
    <i class="oi oi-chevron-right"
        style="cursor: pointer;"
        @onclick="() => { WeekStart = WeekStart.AddDays(7 * NumWeeks); }"
    /></h4>
}

<h4 class="mt-1 me-4">
<i class="oi oi-chevron-left"
    style="cursor: pointer;"
    @onclick="() => { WeekStart = WeekStart.AddDays(-7 * NumWeeks); }"
/>
    Week of @WeekStart.ToLongDateString().Replace("Sunday, ", "")
</h4>

@{
    string[] _Days = { "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" };
}

@for (int k = 0; k < NumWeeks; k++)
{
<div class="_col-no-margin mt-1">
    @for (int j = 0; j < 7; j++)
    {
        <div style="width: 14%;" class="col">
            @if (k == 0) { <h3>@_Days[j]</h3> }
            <ClassScheduleDay Class=@Class
                Schedule=@Schedule
                Date=@WeekStart.AddDays(k * 7 + j)
                ShowEditing=ShowEditing
                UpdateCallback="() =>
                {
                    InvokeAsync(() => StateHasChanged());
                }"
                DisplayClassTitles=DisplayClassTitles
                DeleteIds=DeleteIds
                SchedulerParent=this
            />
        </div>
    }
</div>
}

@code
{
    [Parameter]
    public ClassDBO Class { get; set; } = new();
    [Parameter]
    public bool ShowEditing { get; set; } = false;
    [Parameter]
    public ManageClass Manager { get; set; } = new();
    [Parameter]
    public int NumWeeks { get; set; } = 1;
    [Parameter]
    public int DisplayUserSched { get; set; } = 0;
    [Parameter]
    public bool DisplayClassTitles { get; set; } = false;
    [Parameter]
    public bool OverrideDateFocus { get; set; } = false;

    public List<ClassScheduleDBO> Schedule = new();
    private string ValidationMessage = "";
    private DateTime WeekStart = DateTime.Today;
    private bool HasMoreRight = false;
    private List<int> DeleteIds = new();

    private bool PeriodsOverlap(DateTime StartA, DateTime EndA, DateTime StartB, DateTime EndB)
    {
        return StartA < EndB && StartB < EndA;
    }

    private void ValidateDay(ClassScheduleDBO InQuestion, List<ClassScheduleDBO> Others, DateTime Day)
    {
        // Calculation ASSUMES relevant schedule happens on `Day`;
        // find all classes which occur on that day
        var OnDay = GetClassesOnDay(Others, Day.Date)
            // Filter out the record being edited
            .FindAll((It) => It.Id != InQuestion.Id);
        foreach (var Other in OnDay)
        {
            // Calculate the actual date/time on that specific day
            var RelStart = Day.Date
                .AddHours(InQuestion.FirstDate.Hour)
                .AddMinutes(InQuestion.FirstDate.Minute);
            var OtherStart = Day.Date
                .AddHours(Other.FirstDate.Hour)
                .AddMinutes(Other.FirstDate.Minute);
            if (PeriodsOverlap(
                RelStart, RelStart.AddMinutes(InQuestion.Duration),
                OtherStart, OtherStart.AddMinutes(Other.Duration)
            ))
            {
                var _Class = Classes.Class_GetById(Other.ClassId).Get()!;
                throw new Exception($"This schedule would conflict with the '{_Class.ClassName}' session starting at {Other.FirstDate.ToShortTimeString()} on {Day.ToShortDateString()}.");
            }
        }
    }

    public void Validate(ClassScheduleDBO InQuestion, List<ClassScheduleDBO> Others)
    {
        if (InQuestion.Recurrence == 0)
        {
            ValidateDay(InQuestion, Others, InQuestion.FirstDate.Date);
            return;
        }

        for (int i = 0;
            i <= ((InQuestion.Occurrences <= 0) ? 1024 : InQuestion.Occurrences);
            i++)
        {
            var Date = InQuestion.FirstDate
                .Date
                .AddDays(InQuestion.Recurrence * i);
            ValidateDay(InQuestion, Others, Date);
        }
    }

    public List<ClassScheduleDBO> GetClassesOnDay(List<ClassScheduleDBO> Schedule, DateTime Day)
    {
        return Schedule.FindAll((It) =>
        {
            // Select if this is the first day
            var JustDay = It.FirstDate.Date;
            if (JustDay == Day.Date)
                return true;
            // Don't select if class is over (or hasn't started yet)
            if (It.Recurrence <= 0 || Day.Date < JustDay)
                return false;
            // Select if today falls on an even recurrence
            var EndDate = JustDay.AddDays(It.Recurrence * It.Occurrences);
            var DiffDays = Day.Date.Subtract(JustDay).Days;
            if ((Day.Date <= EndDate || It.Occurrences <= 0)
                && DiffDays % It.Recurrence == 0)
                return true;

            return false;
        });
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Schedule = (DisplayUserSched == 0)
            ? Classes.ClassSchedule_List(Class!.Id).Get()!
            : Classes.ClassSchedule_GetByUserId(DisplayUserSched).Get()!;

        var _WeekStart = Schedule.FirstOrDefault()?.FirstDate ?? DateTime.Today;
        if (OverrideDateFocus) _WeekStart = DateTime.Today;
        var Offset = -(int)_WeekStart.DayOfWeek;
        WeekStart = _WeekStart.AddDays(Offset);

        @*
        HasMoreRight = Schedule.Find((It) =>
        {
            return It.FirstDate.AddDays(It.Recurrence * It.Occurrences) >= WeekStart.AddDays(7 * NumWeeks);
        }) != null;
        *@
    } 

    public void Save()
    {
        Classes.ClassSchedule_DeleteByIds(string.Join(',', DeleteIds.Select((It) => It.ToString()))).Get();

        foreach (var Session in Schedule)
        {
            // Remove bogus IDs from new entities
            if (Session.Id < 0) Session.Id = null;
            var Result = Classes.ClassSchedule_Set(
                Id: Session.Id,
                ClassId: Class.Id,
                FirstDate: Session.FirstDate,
                Recurrence: Session.Recurrence,
                Occurrences: Session.Occurrences,
                Duration: Session.Duration
            );

            Session.Id = Result.Get()!;
        }
    }

    private void OnAddClick()
    {
        var Created = new ClassScheduleDBO();
        Schedule.Add(Created);

        StateHasChanged();
    }
}

<style>
    div._col-no-margin .col
    {
        margin-left: 0 !important;
        margin-right: 0 !important;
        padding: 0.2em;
        min-width: 6.5em;
        max-width: 14%;
        display: inline-block;
        vertical-align: top;
    }
    div.schedule-day-block
    {
        padding: 0.5em;
        border: 1px solid grey;
        border-radius: 0.6em;
        box-shadow: 0 0 0.3em 0.3em #c2c2c2;
        border-left: 0.4em solid green;
        min-height: 10.8em;
        padding-bottom: 0;
    }
    .oi-chevron-top
    {
        padding-left: 2em;
    }
    .bootstrap-datetimepicker-widget table td span
    {
        display: inline;
    }
</style>