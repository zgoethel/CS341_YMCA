@using CS341_YMCA.Data
@using CS341_YMCA.Controllers

@inject ClassController Classes

<tr>
    @if (EditMode)
    {
        <td><InputDate @bind-Value=@Session.FirstDate class="form-control" /></td>
        <td>
            <InputNumber @bind-Value=@Hour class="form-control" min=1 max=12 step=1 />:
            <InputNumber @bind-Value=@Minute class="form-control" min=0 max=59 step=15 />&nbsp;
            <InputSelect @bind-Value=@AmPm class="form-control">
                <option>AM</option>
                <option>PM</option>
            </InputSelect>
        </td>
        <td><InputNumber @bind-Value=@Session.Duration class="form-control" min=0 style="max-width: 5em;" /> minutes</td>
        @if (@Session.Recurrence == 0)
        {
            <td>Never</td>
        } else if (@Session.Occurrences == 0)
        {
            <td>Every @Session.Recurrence days indefinitely</td>
        } else
        {
            <td>Every @Session.Recurrence days, @Session.Occurrences times</td>
        }
    } else
    {
        <td>@Session.FirstDate.ToLongDateString()</td>
        <td>@Session.FirstDate.ToShortTimeString()</td>
        <td>@Session.Duration minutes</td>
        @if (@Session.Recurrence == 0)
        {
            <td>Never</td>
        } else if (@Session.Occurrences == 0)
        {
            <td>Every @Session.Recurrence days indefinitely</td>
        } else
        {
            <td>Every @Session.Recurrence days, @Session.Occurrences times</td>
        }
    }

    @if (ShowEditing)
    {
        <td>
            @if (EditMode)
            {
                <i class="oi oi-check" style="cursor: pointer;" @onclick=OnSaveClicked></i>
            } else
            {
                <i class="oi oi-pencil" style="cursor: pointer;" @onclick=OnEditClicked></i>
                <i class="oi oi-trash" style="cursor: pointer;" @onclick=OnDeleteClicked></i>
            }
        </td>
    }
</tr>

@code
{
    [Parameter]
    public ClassDBO? Parent { get; set; }
    [Parameter]
    public ClassScheduleDBO? Session { get; set; }
    [Parameter]
    public bool ShowEditing { get; set; } = false;

    private bool EditMode = false;

    private int Hour { get; set; } = 0;
    private int Minute { get; set; } = 0;
    private string AmPm { get; set; } = "AM";

    protected override void OnAfterRender(bool FirstRender)
    {
        base.OnAfterRender(FirstRender);

        if (FirstRender)
        {
            if ((Session?.Id ?? 0) == 0)
                EditMode = true;

            StateHasChanged();
        }
    }

    private void OnDeleteClicked()
    {

    }

    public void OnEditClicked()
    {
        try
        {
            Hour = Session?.FirstDate.Hour ?? 12;
            Minute = Session?.FirstDate.Minute ?? 00;

            AmPm = (Hour >= 12) ? "PM" : "AM";
            Hour %= 12;
            if (Hour == 0) Hour += 12;
        } catch
        {
            Hour = 12;
            Minute = 00;
        }

        EditMode = true;
        StateHasChanged();
    }

    private void OnSaveClicked()
    {
        if (Hour == 12) Hour -= 12;

        var DateOnly = Session!.FirstDate.Date;
        DateOnly = DateOnly.AddHours(Hour);
        if (AmPm == "PM")
            DateOnly = DateOnly.AddHours(12);
        DateOnly = DateOnly.AddMinutes(Minute);
        Session.FirstDate = DateOnly;

        var Result = Classes.ClassSchedule_Set(
            Id: Session.Id,
            ClassId: Parent?.Id,
            FirstDate: Session.FirstDate,
            Recurrence: Session.Recurrence,
            Occurrences: Session.Occurrences,
            Duration: Session.Duration
        );

        if (Result.Success)
        {
            EditMode = false;
            StateHasChanged();
        }
    }
}
