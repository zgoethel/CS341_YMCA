@using CS341_YMCA.Data
@using CS341_YMCA.Controllers

@inject ClassController Classes

<tr>
    @if (EditMode)
    {
        <td><InputDate @bind-Value=@Session.FirstDate class="form-control" /></td>
        <td>
            <InputNumber @bind-Value=@Hour class="form-control" min=1 max=12 step=1 />:
            <InputNumber @bind-Value=@Minute class="form-control" min=0 max=59 step=15 />&nbsp;
            <InputSelect @bind-Value=@AmPm class="form-control">
                <option>AM</option>
                <option>PM</option>
            </InputSelect>
        </td>
        <td><InputNumber @bind-Value=@Session.Duration class="form-control" min=0 style="max-width: 5em;" /> minutes</td>
        <td>
            Every
            <InputNumber @bind-Value=@Session.Recurrence class="form-control" min=0 step=1 />
            days <i>(zero for one-time)</i>, repeating
            <InputNumber @bind-Value=@Session.Occurrences class="form-control" min=0 step=1 />
            times <i>(zero for indefinite)</i>
        </td>
    } else
    {
        <td>@Session.FirstDate.ToLongDateString()</td>
        <td>@Session.FirstDate.ToShortTimeString()</td>
        <td>@Session.Duration minutes</td>
        @if (@Session.Recurrence == 0)
        {
            <td>Never</td>
        } else if (@Session.Occurrences == 0)
        {
            <td>Every @Session.Recurrence days indefinitely</td>
        } else
        {
            <td>Every @Session.Recurrence days, @Session.Occurrences times</td>
        }
    }

    @if (Session.Recurrence != 0 && Session.Occurrences != 0)
    {
        var DateEnd = Session.FirstDate;
        for (int i = 0; i < Session.Occurrences; i++)
        {
            DateEnd = DateEnd.AddDays(Session.Recurrence);
        }
        <td><i>@DateEnd.ToShortDateString()</i></td>
    } else
    {
        <td>&mdash;</td>
    }

    @if (ShowEditing)
    {
        <td>
            @if (EditMode)
            {
                <i class="oi oi-check" style="cursor: pointer;" @onclick=OnSaveClicked></i>
            } else
            {
                <i class="oi oi-pencil" style="cursor: pointer;" @onclick=OnEditClicked></i>
                <i class="oi oi-trash" style="cursor: pointer;" @onclick=OnDeleteClicked></i>
            }
        </td>
    }
</tr>

@code
{
    [Parameter]
    public ClassDBO Parent { get; set; } = new();
    [Parameter]
    public ClassScheduleDBO Session { get; set; } = new();
    [Parameter]
    public bool ShowEditing { get; set; } = false;
    [Parameter]
    public ClassScheduler Scheduler { get; set; } = new();

    private bool EditMode = false;

    private int Hour { get; set; } = 0;
    private int Minute { get; set; } = 0;
    private string AmPm { get; set; } = "AM";

    protected override void OnAfterRender(bool FirstRender)
    {
        base.OnAfterRender(FirstRender);

        if (FirstRender)
        {
            if ((Session?.Id ?? 0) == 0)
                EditMode = true;

            StateHasChanged();
        }
    }

    private void OnDeleteClicked()
    {
        Scheduler.ValidationMessage = "Delete not yet implemented.";
        Scheduler._StateHasChanged();
    }

    public void OnEditClicked()
    {
        try
        {
            Hour = Session?.FirstDate.Hour ?? 12;
            Minute = Session?.FirstDate.Minute ?? 00;

            AmPm = (Hour >= 12) ? "PM" : "AM";
            Hour %= 12;
            if (Hour == 0) Hour += 12;
        } catch
        {
            Hour = 12;
            Minute = 00;
        }

        EditMode = true;
        StateHasChanged();
    }

    private void OnSaveClicked()
    {
        // Validation for time values
        if (Hour < 1 || Hour > 12 || Hour != (int)Hour
            || Minute < 0 || Minute > 59 || Minute != (int)Minute
            || Session!.Duration < 0 || Session!.Duration != (int)Session!.Duration)
        {
            Scheduler.ValidationMessage = "Please specify times in valid whole amounts.";
            Scheduler._StateHasChanged();
            return;
        }

        // Validation for repetition values
        if (Session!.Recurrence < 0 || Session!.Occurrences < 0
            || Session!.Recurrence != (int)Session!.Recurrence)
        {
            Scheduler.ValidationMessage = "Repetition settings cannot be negative nor decimal.";
            Scheduler._StateHasChanged();
            return;
        }

        if (Hour == 12) Hour -= 12;

        var DateOnly = Session!.FirstDate.Date;
        DateOnly = DateOnly.AddHours(Hour);
        if (AmPm == "PM")
            DateOnly = DateOnly.AddHours(12);
        DateOnly = DateOnly.AddMinutes(Minute);
        Session.FirstDate = DateOnly;

        if (Parent?.MemberEnrollmentStart != null
            && (Parent?.NonMemberEnrollmentStart != null
            || !(Parent?.AllowNonMembers ?? false))
        )
        {
            // Validate the first session is after enrollment period
            var EnrollmentEnd = Parent!.MemberEnrollmentStart!.Value.AddDays(Parent!.MemberEnrollmentDays ?? 1);
            if (Parent?.AllowNonMembers ?? false)
            {
                var _EnrollmentEnd = Parent!.NonMemberEnrollmentStart!.Value.AddDays(Parent!.NonMemberEnrollmentDays ?? 1);
                if (_EnrollmentEnd > EnrollmentEnd)
                    EnrollmentEnd = _EnrollmentEnd;
            }

            if (EnrollmentEnd > Session!.FirstDate)
            {
                Scheduler.ValidationMessage = "Classes cannot start before enrollment closes. Please change the enrollment window(s) or class schedule date(s).";
                Scheduler._StateHasChanged();
                return;
            }
        }

        var Result = Classes.ClassSchedule_Set(
            Id: Session.Id,
            ClassId: Parent?.Id,
            FirstDate: Session.FirstDate,
            Recurrence: Session.Recurrence,
            Occurrences: Session.Occurrences,
            Duration: Session.Duration
        );

        if (Result.Success)
        {
            Session.Id = Result.Get()!;
            EditMode = false;
            StateHasChanged();

            Scheduler.ValidationMessage = "";
            Scheduler._StateHasChanged();
        }
    }
}
