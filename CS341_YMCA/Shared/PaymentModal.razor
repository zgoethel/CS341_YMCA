@using System.Text.RegularExpressions

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services
@using CS341_YMCA.Pages

@inject SiteUserRepository SiteUsers
@inject IJSRuntime Js

<BsModal @ref=Modal
    SubmitText="Pay"
    SubmitAction=PaymentSubmit>
    @* Add this to params to remove cancellation *@
    @*CancelText=""*@

    <Title>Make a Payment</Title>
    <Body>

    <EditForm Model=PaymentDetails>
        <div class="row">
            <div class="col-sm-8">
                <label>Cardholder Name:</label>
            </div>
            <div class="col-sm-4">
                <label>Security Code:</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <InputText class="form-control mb-2" type="text" @bind-Value=PaymentDetails!.HolderName />
            </div>
            <div class="col-sm-4">
                <InputText class="form-control mb-2" @bind-Value=SecurityCode pattern="[0-9]+" />
            </div>
        </div>
            
        <label>Card Number:</label>
        <InputText class="form-control mb-2" type="text" @bind-Value=PaymentDetails.CardNumber placeholder="&middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp; &middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp; &middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp; &middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp;" />

         <div class="row">
            <div class="col-sm-5">
                <label>Expiration Date:</label>
            </div>
            <div class="col-sm-3">
                <label>Postal Code:</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-5">
                <InputDate Type="InputDateType.Month" class="form-control" @bind-Value=PaymentDetails.CardExpiry id="PaymentCardExpiry" placeholder="YYYY-MM" />
            </div>
            <div class="col-sm-3">
                <InputText class="form-control mb-2" @bind-Value=PostalCode pattern="[0-9]+" />
            </div>
        </div>

        <hr />

        <div style="text-align: right;">Total due: <strong>$@string.Format("{0:0.00}", PaymentDetails.Amount)</strong></div>
    </EditForm>
    </Body>
</BsModal>

@code
{
    [CascadingParameter]
    protected SiteUserDBO LoggedIn { get; set; } = new();

    [Parameter]
    public Action<int>? PaymentCallback { get; set; }

    private BsModal? Modal;
    private UserPaymentDBO? PaymentDetails;
    private string PostalCode = "";
    private string SecurityCode = "";

    private async Task<bool> PaymentSubmit()
    {
        if (
            string.IsNullOrEmpty(PaymentDetails!.HolderName)
            || string.IsNullOrEmpty(PaymentDetails.CardNumber)
            || PaymentDetails.CardExpiry <= DateTime.UnixEpoch
            || string.IsNullOrEmpty(PostalCode)
            || string.IsNullOrEmpty(SecurityCode)
        )
        {
            Modal!.Error("Please provide all payment details in proper format.");
            return false;
        }
        if (!Regex.IsMatch(PaymentDetails.CardNumber, "^([0-9]{4}[- ]?){4}$"))
        {
            Modal!.Error("Please provide a valid credit card number (16 numerical digits, dashes or spaces at groups of 4 are allowed).");
            return false;
        }
        // Validate the date format; some browsers (Firefox) don't seem to
        // have month pickers built in
        var ExprDateVal = await Js.InvokeAsync<string>("GetInputVal", "PaymentCardExpiry");
        if (!Regex.IsMatch(ExprDateVal, "^[0-9]{4}-[0-9]{2}$"))
        {
            Modal!.Error("Please provide the expiration date in the form YYYY-MM.");
            return false;
        }
        // Some browsers allow text characters in number inputs
        if (!Regex.IsMatch(SecurityCode, "^[0-9]+$") || !Regex.IsMatch(PostalCode, "^[0-9]+$")
        )
        {
            Modal!.Error("Please provide CVC and postal code as numerical values.");
            return false;
        }

        PaymentDetails.SecurityCode = int.Parse(SecurityCode);
        PaymentDetails.PostalCode = int.Parse(PostalCode);

        var Result = SiteUsers.SiteUserPayments_Enter(
            UserId: LoggedIn.Id,
            Amount: PaymentDetails.Amount,
            CardNumber: PaymentDetails.CardNumber,
            SecurityCode: PaymentDetails.SecurityCode,
            PostalCode: PaymentDetails.PostalCode,
            HolderName: PaymentDetails.HolderName,
            CardExpiry: PaymentDetails.CardExpiry
        );

        var _PaymentId = Result.Get()!;

        if (!Result.Success)
        {
            Modal!.Error(Result.Error ?? "An unexpected error has occurred.");
            return false;
        }

        // Alert the caller that the payment is ready
        PaymentCallback?.Invoke(_PaymentId);

        // Return true to close the modal
        return true;
    }

    public void StartProcess(float Amount)
    {
        Modal!.Error("");
        // Set up form state if necessary
        PaymentDetails = new()
        {
            Amount = (decimal)Amount,
            CardExpiry = DateTime.Now.Date.AddDays(1 - DateTime.Now.Date.Day)
        };
        PostalCode = "";
        SecurityCode = "";

        InvokeAsync(() => StateHasChanged());
        Modal!.Open();
    }
}