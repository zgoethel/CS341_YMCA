@using System.Text.RegularExpressions

@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services
@using CS341_YMCA.Pages

@inject SiteUserRepository SiteUsers
@inject IJSRuntime Js

@* MODAL USED FOR TAKING CREDIT CARD DETAILS *@
<BsModal @ref=Modal
    SubmitText="Pay"
    SubmitAction=PaymentSubmit>
    @* Add this to params to remove cancellation *@
    @*CancelText=""*@

    <Title>Make a Payment</Title>
    <Body>

    <EditForm Model=PaymentDetails>
        @* CARD NAME/CVC LABELS *@
        <div class="row">
            <div class="col-sm-8">
                <label>Cardholder Name:</label>
            </div>
            <div class="col-sm-4">
                <label>Security Code:</label>
            </div>
        </div>
        @* CARD NAME/CVC FIELDS *@
        <div class="row">
            <div class="col-sm-8">
                <InputText class="form-control mb-2" type="text" @bind-Value=PaymentDetails!.HolderName />
            </div>
            <div class="col-sm-4">
                <InputText class="form-control mb-2" @bind-Value=SecurityCode pattern="[0-9]+" />
            </div>
        </div>
        
        @* CARD NUMBER FIELD *@
        <label>Card Number:</label>
        <InputText class="form-control mb-2" type="text" @bind-Value=PaymentDetails.CardNumber placeholder="&middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp; &middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp; &middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp; &middot;&nbsp;&middot;&nbsp;&middot;&nbsp;&middot;&nbsp;" />

        @* CARD EXPIRATION/ZIP LABELS *@
        <div class="row">
            <div class="col-sm-5">
                <label>Expiration Date:</label>
            </div>
            <div class="col-sm-3">
                <label>Postal Code:</label>
            </div>
        </div>
        @* CARD EXPIRATION/ZIP FIELDS *@
        <div class="row">
            <div class="col-sm-5">
                <InputDate Type="InputDateType.Month" class="form-control" @bind-Value=PaymentDetails.CardExpiry id="PaymentCardExpiry" placeholder="YYYY-MM" />
            </div>
            <div class="col-sm-3">
                <InputText class="form-control mb-2" @bind-Value=PostalCode pattern="[0-9]+" />
            </div>
        </div>

        <hr />

        @* PAYMENT AMOUNT FOOTER *@
        <div style="text-align: right;">Total due: <strong>$@string.Format("{0:0.00}", PaymentDetails.Amount)</strong></div>
    </EditForm>
    </Body>
</BsModal>

@code {
    /// <summary>
    /// DBO of currently logged in user.
    /// </summary>
    [CascadingParameter]
    protected SiteUserDBO LoggedIn { get; set; } = new();

    /// <summary>
    /// Called to provide the generated payment ID upon completion.
    /// </summary>
    [Parameter]
    public Action<int>? PaymentCallback { get; set; }

    private BsModal? Modal;
    private UserPaymentDBO? PaymentDetails;
    private string PostalCode = "";
    private string SecurityCode = "";

    /// <summary>
    /// Called when the payment form is submitted to perform entry.
    /// </summary>
    /// <returns>Whether the modal should close.</returns>
    private async Task<bool> PaymentSubmit()
    {
        // Validate provided details
        if (string.IsNullOrEmpty(PaymentDetails!.HolderName)
            || string.IsNullOrEmpty(PaymentDetails.CardNumber)
            || PaymentDetails.CardExpiry <= DateTime.UnixEpoch
            || string.IsNullOrEmpty(PostalCode)
            || string.IsNullOrEmpty(SecurityCode))
        {
            Modal!.Error("Please provide all of the payment details shown below.");
            return false;
        } else if (!int.TryParse(SecurityCode, out _)
            || !int.TryParse(PostalCode, out _))
        {
            Modal!.Error("There are illegal characters in the security or postal codes.");
            return false;
        }

        var exprDateVal = await Js.InvokeAsync<string>("InteropImpl.getInputValue", "#PaymentCardExpiry");
        if (!Regex.IsMatch(exprDateVal, "^[0-9]{4}-[0-9]{2}$"))
        {
            Modal!.Error("Please provide the expiration date in the form YYYY-MM.");
            return false;
        } else
            PaymentDetails.CardExpiry = DateTime.Parse(exprDateVal);

        // Store numerical fields as numbers
        PaymentDetails.SecurityCode = int.Parse(SecurityCode);
        PaymentDetails.PostalCode = int.Parse(PostalCode);

        // Perform the entry into the database
        var Result = SiteUsers.SiteUserPayments_Enter(
            UserId: LoggedIn.Id,
            Amount: PaymentDetails.Amount,
            CardNumber: PaymentDetails.CardNumber,
            SecurityCode: PaymentDetails.SecurityCode,
            PostalCode: PaymentDetails.PostalCode,
            HolderName: PaymentDetails.HolderName,
            CardExpiry: PaymentDetails.CardExpiry);

        if (!Result.Success)
        {
            Modal!.Error(Result.Error ?? "An unexpected error has occurred.");
            return false;
        }
        
        // Alert the caller that the payment is ready
        PaymentCallback?.Invoke(Result.Get()!);

        // Return true to close the modal
        return true;
    }

    
    /// <summary>
    /// Begins the payment process and shows the payment modal.
    /// </summary>
    /// <param name="Amount">Dollar amount of the transaction.</param>
    public void StartProcess(decimal Amount)
    {
        Modal!.Error("");
        // Set up form state if necessary
        PaymentDetails = new()
        {
            Amount = Amount,
            CardExpiry = DateTime.Now.Date.AddDays(1 - DateTime.Now.Date.Day)
        };
        PostalCode = "";
        SecurityCode = "";

        InvokeAsync(() => StateHasChanged());
        // Open the payment modal
        Modal!.Open();
    }
}