@using CS341_YMCA.Pages
@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services

@inject ClassRepository Classes
@inject ClassValidationService ClassValidation

@* CLASS SESSION ADD/EDIT MODAL *@
<BsModal @ref=addEditModal
    SubmitAction=AddEditSubmit>

    <Title>Edit Schedule for <strong>'@Date.ToShortDateString()'</strong></Title>
    <Body>
    <EditForm Model=activeSchedule>

    <div class="row">
    <div class="col-sm-5">

        @* SESSION'S FIRST DATE PICKER *@
        <label>First occurrence date:</label>
        <InputDate class="form-control" TValue=DateTime
            Value=activeSchedule.FirstDate
            ValueExpression="() => activeSchedule.FirstDate"
            ValueChanged="(value) =>
            {
                // Rebuild date/time with new date
                activeSchedule.FirstDate = value
                    .Date
                    .AddHours(activeSchedule.FirstDate.Hour)
                    .AddMinutes(activeSchedule.FirstDate.Minute);
                StateHasChanged();
            }" />

    </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-sm-5">

            @* SESSION START TIME PICKER *@
            <label>Start time</label>
            <BsTimePicker Value=activeSchedule.FirstDate ChangeAction="(value) =>
                {
                    // Rebuild date/time with new time
                    activeSchedule.FirstDate = activeSchedule.FirstDate
                        .Date
                        .AddHours(value.Hour)
                        .AddMinutes(value.Minute);
                    StateHasChanged();
                }" />

        </div>
        <div class="col-sm-3">

            @* SESSION DURATION INPUT *@
            <label>Duration</label>
            <InputNumber class="form-control me-2" @bind-Value=activeSchedule.Duration min=1 step=1 />
            <span><i>(minutes)</i></span>

        </div>
    </div>

    @* SESSION REPETITION TOGGLE *@
    <InputCheckbox class="me-2 mt-4" @bind-Value=classRepeats />
    <span>Session repeats</span>
    
    @* TOGGLABLE CLASS REPETION SECTION *@
    @if (classRepeats)
    {
        <h5 class="mt-4">Recurrence Settings</h5>
        <div>

            @* REPETITION INTERVAL INPUT *@
            <span>Repeats every</span>
            <InputNumber class="form-control ms-2 me-2 mt-2"
                @bind-Value=activeSchedule.Recurrence
                style="display: inline-block;max-width: 5em;"
                min=1
                step=1 />
            <span>days</span>

        </div>
        <div>

            @* DROPDOWN FOR INDEFINITE/n-TIME RECURRENCE *@
            <span>and occurs</span>
            <InputSelect class="form-control form-select ms-2 me-2 mt-2"
                    style="display: inline-block;max-width: 14em;"
                    @bind-Value=occursIndefinitely>

                <option value=true>indefinitely.</option>
                <option value=false>for a fixed time.</option>
            </InputSelect>

            @* TOGGLABLE OCCURRENCE COUNT SECTION *@
            @if (!occursIndefinitely)
            {
                @* REPETITION COUNT INPUT *@
                <span clsas="mt-4">Repeat</span>
                <InputNumber class="form-control ms-2 me-2"
                    @bind-Value=activeSchedule.Occurrences
                    style="display: inline-block;max-width: 5em;"
                    min=1
                    step=1 />
                <span>time(s).</span>

                <br />

                @* CALCULATED END DATE *@
                <i style="display: block;" class="mt-2">
                    (Last day would be <strong>
                    @(activeSchedule.FirstDate
                        .Date
                        .AddDays(activeSchedule.Recurrence * activeSchedule.Occurrences)
                        .ToLongDateString())
                    </strong>)
                </i>
            }
        </div>
    }

    </EditForm>
    </Body>

    <Footer>

    @* HIDE IF NEW *@
    @if (activeSchedule.Id != tempIdCount + 1)
    {
        @* MODAL DELETE BUTTON *@
        <a class="btn btn-danger"
            style="position: absolute;left: 1em;"
            @onclick=DeleteClick>
            Delete
        </a>
    }

    </Footer>
</BsModal>


@* ALTERNATING MONTH COLOR CODES *@
@{
    const string evenColor = "#ffffff";
    const string oddColor = "#e4f5dd";
}
@* MAIN SCHEDULE DAY DISPLAY *@
<div class="schedule-day-block mb-1" style="background: @((Date.Month % 2 == 0) ? evenColor : oddColor)">
    @* SHOW OR HIDE EDITING*@
    @if (ShowEditing)
    {
        @* EDIT BUTTON ELEMENT *@
        <i class="oi oi-plus"
            style="float: right;cursor: pointer;"
            @onclick = "() => OpenAddEdit(null)" />
    }

    @* DAY MM/DD HEADER *@
    <p style="margin-bottom: 0.2em;"><strong><i>@Date.Month/@Date.Day</i></strong></p>

    @if (onDay.Count == 0)
    {
        <hr style="margin-top: 0;" />
    } @* ELSE ... DISPLAY ALL UNDELETED SCHEDULE ON DAY *@
    @foreach (var Sched in onDay.FindAll((It) => !DeleteIds!.Contains(It.Id ?? -2)))
    {
        <hr style="margin-top: 0;margin-bottom: 5px;" />

        @* SHOW OR HIDE EDITING CONTROLS *@
        @if (ShowEditing)
        {
            <i class="oi oi-pencil ms-1"
                style="float: right;cursor: pointer;"
                @onclick = "() => OpenAddEdit(Sched)" />
        }

        @* SHOW OR HIDE CLASS TITLE/LINK *@
        @if (DisplayClassTitles)
        {
            @* SHOWING TITLES SHOWS SMALLER RECURRENCE INDICATOR *@
            @if (Sched.Recurrence > 0)
            {
                <i class="oi oi-loop-square" style="float: right;"
                    title="Repeats every @Sched.Recurrence days, @(Sched.Occurrences == 0 ? "indefinitely" : $"{Sched.Occurrences} times")." />
            }

            @* CLASS NAME LINK TO ENROLL *@
            <a href="Enroll/@Sched.ClassId"><strong>@(Sched.ClassName)</strong></a>
        }

        @* CALCULATED BEGIN AND END TIMES *@
        <p>
            @Sched.FirstDate.ToShortTimeString()&nbsp;-
            @Sched.FirstDate.AddMinutes(Sched.Duration).ToShortTimeString()
        </p>

        <p>
            @* DISPLAY LONGER RECURRENCE DATA IF NO TITLES *@
            @if (!DisplayClassTitles)
            {
                @if (Sched.Recurrence <= 0)
                {
                    <i class="oi oi-loop-square" /><i>Never</i>
                } else if (Sched.Occurrences <= 0)
                {
                    <i class="oi oi-loop-square" /><i>Forever</i>
                } else
                {
                    <i class="oi oi-loop-square" />
                    <i>
                        Until
                        @(Sched.FirstDate.Date.AddDays(Sched.Recurrence * Sched.Occurrences).ToShortDateString())
                    </i>
                }
            }
        </p>
    }
</div>

@code
{
    /// <summary>
    /// Active editing class; required when editing to create new sessions.
    /// </summary>
    [Parameter]
    public ClassDBO Class { get; set; } = new();

    /// <summary>
    /// Schedule list from which to filter daily schedules.
    /// </summary>
    [Parameter]
    public List<ClassScheduleDBO> Schedule { get; set; } = new();

    /// <summary>
    /// Whether editing controls should display; provides editing access.
    /// </summary>
    [Parameter]
    public bool ShowEditing { get; set; } = false;

    /// <summary>
    /// The callback will be invoked when this component's state may affect the
    /// rest of the parent schedule editor.
    /// </summary>
    [Parameter]
    public Action UpdateCallback { get; set; } = () => {  };

    /// <summary>
    /// Pass-by-reference list of IDs which have been soft deleted.
    /// </summary>
    [Parameter]
    public List<int>? DeleteIds { get; set; }

    /// <summary>
    /// Date which this component list responsible for displaying.
    /// </summary>
    [Parameter]
    public DateTime Date { get; set; } = DateTime.Today;

    /// <summary>
    /// Whether to display class title links; affects recurrence info.
    /// </summary>
    [Parameter]
    public bool DisplayClassTitles { get; set; } = false;

    private List<ClassScheduleDBO> onDay => ClassValidation.GetClassesOnDay(Schedule, Date.Date);
    private ClassScheduleDBO activeSchedule = new();
    private bool classRepeats = false;
    private bool occursIndefinitely = true;
    private BsModal? addEditModal;
    public static int tempIdCount = -1;

    /// <summary>
    /// Called when the add/edit modal's submit button is clicked.
    /// </summary>
    /// <returns>Whether the modal should close.</returns>
    private async Task<bool> AddEditSubmit() => await Task.Run(() =>
    {
        // Update model's values to match checkboxes
        if (classRepeats)
        {
            if (occursIndefinitely)
                activeSchedule.Occurrences = 0;
        } else
        {
            activeSchedule.Recurrence = 0;
            activeSchedule.Occurrences = 0;
        }

        // Ensure the schedule will be valid.
        try
        {
            ClassValidation.Validate(activeSchedule, Schedule);
        } catch (Exception Ex)
        {
            addEditModal!.Error(Ex.Message);
            return false;
        }

        // Check if this is a brand new record (never submitted)
        if (activeSchedule.Id is null)
            // Assign a new temporary ID if fresh
            activeSchedule.Id = tempIdCount--;
        else
        {
            // Remove old versions if ID already assigned
            Schedule.RemoveAll((It) => It.Id == activeSchedule.Id);
            onDay.RemoveAll((It) => It.Id == activeSchedule.Id);
        }

        // Add newest version of schedule session
        Schedule.Add(activeSchedule);
        onDay.Add(activeSchedule);
        // Clean up modal state and notify parent of update
        addEditModal!.Error("");
        tempIdCount--;
        UpdateCallback();

        // Return true to close the add/edit modal
        return true;
    });

    /// <summary>
    /// Called to set up the add/edit modal with a specific session.
    /// </summary>
    /// <param name="Schedule">Session to edit; null for a new session.</param>
    private void OpenAddEdit(ClassScheduleDBO? Schedule)
    {
        // Make a copy so editing only sticks when pressing "Submit"
        activeSchedule = (Schedule is null)
            // Create a brand new session
            ? new()
            {
                Id = tempIdCount--,
                ClassId = Class.Id,
                FirstDate = Date.Date.AddHours(12),
                Recurrence = 7,
                Duration = 30,
                Occurrences = 1
            }
            // Make a copy of the existing session
            : new()
            {
                Id = Schedule.Id,
                ClassId = Schedule.ClassId,
                FirstDate = Schedule.FirstDate,
                Recurrence = (Schedule.Recurrence == 0)
                    ? 7
                    : Schedule.Recurrence,
                Duration = Schedule.Duration,
                Occurrences = (Schedule.Occurrences == 0)
                    ? 1
                    : Schedule.Occurrences
            };

        // Set up checkbox states from schedule values
        classRepeats = (Schedule is null) ? false : (Schedule!.Recurrence != 0);
        occursIndefinitely = (Schedule is null) ? true : (Schedule.Occurrences == 0);

        StateHasChanged();
        addEditModal!.Open();
    }

    /// <summary>
    /// Called when delete is clicked to soft delete the active session.
    /// </summary>
    private void DeleteClick()
    {
        // Register for hard deletion if in database
        if (activeSchedule.Id > 0)
            DeleteIds?.Add(activeSchedule.Id ?? -1);
        // Soft delete from lists in memory
        if (activeSchedule is not null)
        {
            onDay.RemoveAll((It) => It.Id == activeSchedule.Id);
            Schedule.RemoveAll((It) => It.Id == activeSchedule.Id);
        }
        
        addEditModal!.Close();
        UpdateCallback();
    }
}