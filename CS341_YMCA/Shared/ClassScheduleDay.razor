@using CS341_YMCA.Data
@using CS341_YMCA.Controllers
@using CS341_YMCA.Pages

@inject ClassController Classes

@if (AddEditOpen)
{
    <div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Edit Schedule for <strong>'@Date.ToShortDateString()'</strong></h4>
                    <button type="button" class="btn btn-close close" @onclick="() =>
                        {
                            AddEditOpen = false;
                            StateHasChanged();
                        }"></button>
                </div>
                <div class="modal-body">
                    <p class="font-weight-bold"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="() =>
                        {
                            AddEditOpen = false;
                            StateHasChanged();
                        }">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="() =>
                        {
                            AddEditOpen = false;
                            StateHasChanged();
                        }">Submit</button>
                </div>
            </div>
        </div>
    </div>
}

<div class="schedule-day-block mb-1">

@if (ShowEditing && RelevantSchedule != null)
{
    <i class="oi oi-pencil"
        style="float: right;cursor: pointer;"
        @onclick = "() =>
        {
            AddEditOpen = true;
            StateHasChanged();
        }"
    />
}

<p style="margin-bottom: 0.2em;"><strong><i>@Date.Month/@Date.Day</i></strong></p>
<hr style="margin: 0;" />

@if (RelevantSchedule == null)
{
    @if (ShowEditing)
    {
        <button class="btn btn-primary mt-2"
            @onclick = "() =>
            {
                AddEditOpen = true;
                StateHasChanged();
            }">
        <i class="oi oi-plus" /></button>
    }
} else
{
    <p>
        @RelevantSchedule.FirstDate.ToShortTimeString()&nbsp;-
        @RelevantSchedule.FirstDate.AddMinutes(RelevantSchedule.Duration).ToShortTimeString()
    </p>

    <p>
    @if (RelevantSchedule.Recurrence <= 0)
    {
        <i class="oi oi-loop-square" /><i>Never</i>
    } else if (RelevantSchedule.Occurrences <= 0)
    {
        <i class="oi oi-loop-square" /><i>Forever</i>
    } else
    {
        <i class="oi oi-loop-square" /><i>
            Until
            @(RelevantSchedule.FirstDate.Date.AddDays(RelevantSchedule.Recurrence * RelevantSchedule.Occurrences).ToShortDateString())
        </i>
    }
    </p>
}

</div>

@code
{
    [Parameter]
    public ClassDBO Class { get; set; } = new();
    [Parameter]
    public List<ClassScheduleDBO> Schedule { get; set; } = new();
    [Parameter]
    public bool ShowEditing { get; set; } = false;

    private DateTime _Date { get; set; } = DateTime.Today;
    [Parameter]
    public DateTime Date
    {
        get => _Date;
        set
        {
            _Date = value.Date;
            // Reload schedule data for new day
            RelevantSchedule = Schedule.Find((It) =>
            {
            // Select if this is the first day
            var JustDay = It.FirstDate.Date;
                if (JustDay == _Date)
                    return true;
            // Don't select if class is over
            if (
                    It.Recurrence <= 0
                    || _Date < JustDay
                ) return false;
            // Select if today falls on an even recurrence
            var EndDate = JustDay.AddDays(It.Recurrence * It.Occurrences);
                var DiffDays = _Date.Subtract(JustDay).Days;
                if (
                    (_Date <= EndDate || It.Occurrences <= 0)
                    && DiffDays % It.Recurrence == 0
                ) return true;

                return false;
            });

            StateHasChanged();
        }
    }

    private ClassScheduleDBO? RelevantSchedule;
    private bool AddEditOpen = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        // Force trigger of change
        Date = _Date;
    }
}

<style>
    div.schedule-day-block
    {
        padding: 0.5em;
        border: 1px solid grey;
        border-radius: 0.6em;
        box-shadow: 0 0 0.3em 0.3em #c2c2c2;
        border-left: 0.4em solid green;
        height: 9.8em;
    }
</style>