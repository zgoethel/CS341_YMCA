@using CS341_YMCA.Components
@using CS341_YMCA.Helpers
@using CS341_YMCA.Services
@using CS341_YMCA.Pages

@inject ClassRepository Classes
@inject IJSRuntime Js

<BsModal @ref=AddEditModal
    SubmitAction=AddEditSubmit>

    <Title>Edit Schedule for <strong>'@Date.ToShortDateString()'</strong></Title>
    <Body>
    <EditForm Model=RelevantSchedule>

    <div class="row">
    <div class="col-sm-5">
        <label>First occurrence date:</label>
        <InputDate class="form-control" @bind-Value=RelevantSchedule.FirstDate />
    </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-sm-5"><label>Start time</label></div>
        <div class="col-sm-3"><label>Duration</label></div>
    </div>
    <div class="row">
    <div class="col-sm-5">
        <input type="text" class="timepicker form-control" value=@JustTime id="class-sched-timepicker" />
    </div>
    <div class="col-sm-3">
        <InputNumber class="form-control me-2" @bind-Value=RelevantSchedule.Duration min=1 step=1 />
        <span><i>(minutes)</i></span>
    </div>
    </div>

    <InputCheckbox class="me-2 mt-4" @bind-Value=ClassRepeats />
    <span>Session repeats</span>

    @if (ClassRepeats)
    {
        <h5 class="mt-4">Recurrence Settings</h5>
        <div>
            <span>Repeats every</span>
            <InputNumber class="form-control ms-2 me-2 mt-2"
                @bind-Value=RelevantSchedule.Recurrence
                style="display: inline-block;max-width: 5em;"
                min=1
                step=1 />
            <span>days</span>
        </div>
        <div>
        <span>and occurs</span>
        <InputSelect class="form-control form-select ms-2 me-2 mt-2"
                style="display: inline-block;max-width: 14em;"
                @bind-Value=OccursIndefinitely>

            <option value=true>indefinitely.</option>
            <option value=false>for a fixed time.</option>
        </InputSelect>

    @if (!OccursIndefinitely)
    {
        <div class="mt-4">
            <span>Repeat</span>
            <InputNumber class="form-control ms-2 me-2"
                @bind-Value=RelevantSchedule.Occurrences
                style="display: inline-block;max-width: 5em;"
                min=1
                step=1 />
            <span>time(s).</span>
            <br />
            <i style="display: block;" class="mt-2">
                (Last day would be <strong>
                @(RelevantSchedule.FirstDate.Date
                    .AddDays(RelevantSchedule.Recurrence * RelevantSchedule.Occurrences)
                    .ToLongDateString())
                </strong>)
            </i>
        </div>
    }
        </div>
    }

    </EditForm>
    </Body>
</BsModal>

<div class="schedule-day-block mb-1">
@if (ShowEditing)
{
    <i class="oi oi-plus"
        style="float: right;cursor: pointer;"
        @onclick = "() => OpenAddEdit(null)"
    />
}

<p style="margin-bottom: 0.2em;"><strong><i>@Date.Month/@Date.Day</i></strong></p>

@if (_RelevantSchedule.Count == 0)
{
    <hr style="margin-top: 0;" />
}

@foreach (var Sched in _RelevantSchedule)
{
    <hr style="margin-top: 0;margin-bottom: 5px;" />
    @if (ShowEditing)
    {
        <i class="oi oi-pencil"
            style="float: right;cursor: pointer;"
            @onclick = "() => OpenAddEdit(Sched)"
        />
    }

    <p>
        @Sched.FirstDate.ToShortTimeString()&nbsp;-
        @Sched.FirstDate.AddMinutes(Sched.Duration).ToShortTimeString()
    </p>

    <p>
    @if (Sched.Recurrence <= 0)
    {
        <i class="oi oi-loop-square" /><i>Never</i>
    } else if (Sched.Occurrences <= 0)
    {
        <i class="oi oi-loop-square" /><i>Forever</i>
    } else
    {
        <i class="oi oi-loop-square" /><i>
            Until
            @(Sched.FirstDate.Date.AddDays(Sched.Recurrence * Sched.Occurrences).ToShortDateString())
        </i>
    }
    </p>
}

</div>

@code
{
    [Parameter]
    public ClassDBO Class { get; set; } = new();
    [Parameter]
    public List<ClassScheduleDBO> Schedule { get; set; } = new();
    [Parameter]
    public bool ShowEditing { get; set; } = false;
    [Parameter]
    public Action UpdateCallback { get; set; } = () => {  };

    // Parent editor copy (original)
    private List<ClassScheduleDBO> _RelevantSchedule = new();
    // Modal editor copy (in flight)
    private ClassScheduleDBO RelevantSchedule = new();
    private bool ClassRepeats = false;
    private bool OccursIndefinitely = true;
    private string JustTime = "";
    private BsModal? AddEditModal;
    private static int Serial = -1;

    private bool PeriodsOverlap(DateTime StartA, DateTime EndA, DateTime StartB, DateTime EndB)
    {
        return StartA < EndB && StartB < EndA;
    }

    private void ValidateDay(DateTime Day)
    {
        // Calculation ASSUMES relevant schedule happens on `Day`;
        // find all classes which occur on that day
        var OnDay = GetClassesOnDay(Day.Date)
            // Filter out the record being edited
            .FindAll((It) => It.Id != RelevantSchedule.Id);
        foreach (var Other in OnDay)
        {
            // Calculate the actual date/time on that specific day
            var RelStart = Day.Date
                .AddHours(RelevantSchedule.FirstDate.Hour)
                .AddMinutes(RelevantSchedule.FirstDate.Minute);
            var OtherStart = Day.Date
                .AddHours(Other.FirstDate.Hour)
                .AddMinutes(Other.FirstDate.Minute);
            if (PeriodsOverlap(
                RelStart, RelStart.AddMinutes(RelevantSchedule.Duration),
                OtherStart, OtherStart.AddMinutes(Other.Duration)
            ))
                throw new Exception($"This session would conflict with the session starting on {Other.FirstDate.ToShortDateString()} @ {Other.FirstDate.ToShortTimeString()} on {Day.ToShortDateString()}.");
        }
    }

    private void Validate()
    {
        if (!ClassRepeats)
        {
            ValidateDay(RelevantSchedule.FirstDate.Date);
            return;
        }

        for (int i = 0;
            i < (RelevantSchedule.Occurrences <= 0 ? 1024 : RelevantSchedule.Occurrences);
            i++)
        {
            var Date = RelevantSchedule.FirstDate
                .Date
                .AddDays(RelevantSchedule.Recurrence * i);
            ValidateDay(Date);
        }
    }

    private List<ClassScheduleDBO> GetClassesOnDay(DateTime Day) =>
        Schedule.FindAll((It) =>
        {
            // Select if this is the first day
            var JustDay = It.FirstDate.Date;
            if (JustDay == Day.Date)
                return true;
            // Don't select if class is over (or hasn't started yet)
            if (
                It.Recurrence <= 0
                || Day.Date < JustDay
            ) return false;
            // Select if today falls on an even recurrence
            var EndDate = JustDay.AddDays(It.Recurrence * It.Occurrences);
            var DiffDays = Day.Date.Subtract(JustDay).Days;
            if (
                (Day.Date <= EndDate || It.Occurrences <= 0)
                && DiffDays % It.Recurrence == 0
            ) return true;

            return false;
        });

    private async Task<bool> AddEditSubmit()
    {
        // Data-binding didn't work for this input
        JustTime = await Js.InvokeAsync<string>("GetInputVal", "class-sched-timepicker");

        var Split = JustTime.Split(' ', ':');
        Split[2] = Split[2].ToUpper();
        if (Split[0] == 12.ToString())
            Split[0] = 0.ToString();
        if (Split[2] == "PM")
            Split[0] = (int.Parse(Split[0]) + 12).ToString();

        RelevantSchedule.FirstDate = RelevantSchedule.FirstDate
            .Date
            .AddHours(int.Parse(Split[0]))
            .AddMinutes(int.Parse(Split[1]));

        if (ClassRepeats)
        {
            if (OccursIndefinitely)
                RelevantSchedule.Occurrences = 0;
        } else
        {
            RelevantSchedule.Recurrence = 0;
            RelevantSchedule.Occurrences = 0;
        }

        try
        {
            Validate();
        } catch (Exception Ex)
        {
            AddEditModal!.Error(Ex.Message);
            return false;
        }

        if (RelevantSchedule.Id is null)
            RelevantSchedule.Id = Serial--;
        else
        {
            Schedule.RemoveAll((It) => It.Id == RelevantSchedule.Id);
            _RelevantSchedule.RemoveAll((It) => It.Id == RelevantSchedule.Id);
        }
        Schedule.Add(RelevantSchedule);
        _RelevantSchedule.Add(RelevantSchedule);

        AddEditModal!.Error("");
        UpdateCallback();
        await InvokeAsync(() => StateHasChanged());

        return true;
    }

    private void OpenAddEdit(ClassScheduleDBO? Schedule)
    {
        // Make a copy so editing only sticks when pressing "Submit"
        RelevantSchedule = (Schedule is null)
            ? new()
            {
                Id = Serial--,
                ClassId = Class.Id,
                FirstDate = Date.Date.AddHours(12),
                Recurrence = 7,
                Duration = 30,
                Occurrences = 1
            }
            : new()
            {
                Id = Schedule.Id,
                ClassId = Schedule.ClassId,
                FirstDate = Schedule.FirstDate,
                Recurrence = (Schedule.Recurrence == 0)
                    ? 7
                    : Schedule.Recurrence,
                Duration = Schedule.Duration,
                Occurrences = (Schedule.Occurrences == 0)
                    ? 1
                    : Schedule.Occurrences
            };

        ClassRepeats = (Schedule is null) ? false : (Schedule!.Recurrence != 0);
        OccursIndefinitely = (Schedule is null) ? true : (Schedule.Occurrences == 0);

        JustTime = RelevantSchedule.FirstDate.ToShortTimeString();

        StateHasChanged();
        AddEditModal!.Open();
    }

    private DateTime _Date { get; set; } = DateTime.Today;
    [Parameter]
    public DateTime Date
    {
        get => _Date;
        set
        {
            _Date = value.Date;
            // Reload schedule data for new day
            _RelevantSchedule = Schedule.FindAll((It) =>
            {
                // Select if this is the first day
                var JustDay = It.FirstDate.Date;
                if (JustDay == _Date)
                    return true;
                // Don't select if class is over
                if (
                    It.Recurrence <= 0
                    || _Date < JustDay
                ) return false;
                // Select if today falls on an even recurrence
                var EndDate = JustDay.AddDays(It.Recurrence * It.Occurrences);
                var DiffDays = _Date.Subtract(JustDay).Days;
                if (
                    (_Date <= EndDate || It.Occurrences <= 0)
                    && DiffDays % It.Recurrence == 0
                ) return true;

                return false;
            });
            
            InvokeAsync(() => StateHasChanged());
        }
    }

    protected override async Task OnAfterRenderAsync(bool FirstRender)
    {
        base.OnAfterRender(FirstRender);

        await Js.InvokeVoidAsync("InitializeTimePickers");
    }
}