/*
Deployment script for CS341_YMCA

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "CS341_YMCA"
:setvar DefaultFilePrefix "CS341_YMCA"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating Table [dbo].[ClassMain]...';


GO
CREATE TABLE [dbo].[ClassMain] (
    [Id]              INT            IDENTITY (1, 1) NOT NULL,
    [ClassName]       NVARCHAR (100) NOT NULL,
    [AllowEnrollment] BIT            NOT NULL,
    [Enabled]         BIT            NOT NULL,
    [Created]         DATETIME       NOT NULL,
    [Updated]         DATETIME       NOT NULL,
    CONSTRAINT [PK_ClassMain] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ClassSchedule]...';


GO
CREATE TABLE [dbo].[ClassSchedule] (
    [Id]         INT      IDENTITY (1, 1) NOT NULL,
    [SectionId]  INT      NOT NULL,
    [FirstDate]  DATETIME NOT NULL,
    [Recurrence] INT      NOT NULL,
    [Duration]   INT      NOT NULL,
    [Created]    DATETIME NOT NULL,
    [Updated]    DATETIME NOT NULL,
    CONSTRAINT [PK_ClassSchedule] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[ClassSection]...';


GO
CREATE TABLE [dbo].[ClassSection] (
    [Id]          INT            IDENTITY (1, 1) NOT NULL,
    [ClassId]     INT            NOT NULL,
    [TotalSeats]  INT            NOT NULL,
    [SectionName] NVARCHAR (100) NOT NULL,
    [Created]     DATETIME       NOT NULL,
    [Updated]     DATETIME       NOT NULL,
    CONSTRAINT [PK_ClassSection] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[SiteUser]...';


GO
CREATE TABLE [dbo].[SiteUser] (
    [Id]           INT              IDENTITY (1, 1) NOT NULL,
    [FirstName]    NVARCHAR (50)    NOT NULL,
    [LastName]     NVARCHAR (50)    NULL,
    [Email]        NVARCHAR (100)   NOT NULL,
    [PasswordHash] NVARCHAR (100)   NULL,
    [ResetToken]   UNIQUEIDENTIFIER NULL,
    [IsAdmin]      BIT              NOT NULL,
    [Created]      DATETIME         NOT NULL,
    [Modified]     DATETIME         NOT NULL,
    CONSTRAINT [PK_SiteUser] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassMain_AllowEnrollment]...';


GO
ALTER TABLE [dbo].[ClassMain]
    ADD CONSTRAINT [DF_ClassMain_AllowEnrollment] DEFAULT ((1)) FOR [AllowEnrollment];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassMain_Enabled]...';


GO
ALTER TABLE [dbo].[ClassMain]
    ADD CONSTRAINT [DF_ClassMain_Enabled] DEFAULT ((1)) FOR [Enabled];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassMain_Created]...';


GO
ALTER TABLE [dbo].[ClassMain]
    ADD CONSTRAINT [DF_ClassMain_Created] DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassMain_Updated]...';


GO
ALTER TABLE [dbo].[ClassMain]
    ADD CONSTRAINT [DF_ClassMain_Updated] DEFAULT (getdate()) FOR [Updated];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassSchedule_Recurrence]...';


GO
ALTER TABLE [dbo].[ClassSchedule]
    ADD CONSTRAINT [DF_ClassSchedule_Recurrence] DEFAULT ((7)) FOR [Recurrence];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassSchedule_Duration]...';


GO
ALTER TABLE [dbo].[ClassSchedule]
    ADD CONSTRAINT [DF_ClassSchedule_Duration] DEFAULT ((60)) FOR [Duration];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassSchedule_Created]...';


GO
ALTER TABLE [dbo].[ClassSchedule]
    ADD CONSTRAINT [DF_ClassSchedule_Created] DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassSchedule_Updated]...';


GO
ALTER TABLE [dbo].[ClassSchedule]
    ADD CONSTRAINT [DF_ClassSchedule_Updated] DEFAULT (getdate()) FOR [Updated];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassSection_Created]...';


GO
ALTER TABLE [dbo].[ClassSection]
    ADD CONSTRAINT [DF_ClassSection_Created] DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating Default Constraint [dbo].[DF_ClassSection_Updated]...';


GO
ALTER TABLE [dbo].[ClassSection]
    ADD CONSTRAINT [DF_ClassSection_Updated] DEFAULT (getdate()) FOR [Updated];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SiteUser_IsAdmin]...';


GO
ALTER TABLE [dbo].[SiteUser]
    ADD CONSTRAINT [DF_SiteUser_IsAdmin] DEFAULT ((0)) FOR [IsAdmin];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SiteUser_Created]...';


GO
ALTER TABLE [dbo].[SiteUser]
    ADD CONSTRAINT [DF_SiteUser_Created] DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating Default Constraint [dbo].[DF_SiteUser_Modified]...';


GO
ALTER TABLE [dbo].[SiteUser]
    ADD CONSTRAINT [DF_SiteUser_Modified] DEFAULT (getdate()) FOR [Modified];


GO
PRINT N'Creating Procedure [dbo].[SiteUser_Authenticate]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Jan. 26, 2022
-- Description:	Checks a user's credentials against what is known
-- =============================================
CREATE PROCEDURE [dbo].[SiteUser_Authenticate]
	-- Add the parameters for the stored procedure here
	@Email NVARCHAR(100),
	@PasswordHash NVARCHAR(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Store individual user values for convenience; values will
	-- be null if not found in the SELECT
	DECLARE @LoginUser INT;
	DECLARE @LoginPassword NVARCHAR(100);
	DECLARE @ExistingToken UNIQUEIDENTIFIER;
	-- Select user record with correct email, set variables
	SELECT TOP 1 
		@LoginUser = [Id],
		@LoginPassword = [PasswordHash],
		@ExistingToken = [ResetToken]
	FROM [SiteUser]
	WHERE [Email] = @Email;

	IF (
		@LoginUser IS NOT NULL AND
		@LoginPassword = @PasswordHash AND
		@ExistingToken IS NULL
	)
	BEGIN
		-- User exists and successful login
		RETURN;
	END
	ELSE IF (
		@ExistingToken IS NOT NULL
	)
	BEGIN
		-- User's account has a pending reset
		RAISERROR('Your account has a pending reset request. Please check your email.', 18, 1);
		RETURN;
	END
	ELSE
	BEGIN
		-- No user found or password didn't match
		RAISERROR('Incorrect email or password. Please try again.', 18, 1);
		RETURN;
	END
END
GO
PRINT N'Creating Procedure [dbo].[SiteUser_Register]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Jan. 26, 2022
-- Description:	Registers a user, generating their initial reset token
-- =============================================
CREATE PROCEDURE [dbo].[SiteUser_Register]
	-- Add the parameters for the stored procedure here
	@FirstName NVARCHAR(50),
	@LastName NVARCHAR(50) = NULL,
	@Email NVARCHAR(100),
	@IsAdmin BIT = 0
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Attempt to find an existing user with the same email
	DECLARE @ExistingUser INT =
	(
		SELECT TOP 1 [Id] FROM [SiteUser]
		WHERE [Email] = @Email
	);

	IF (@ExistingUser IS NOT NULL)
	BEGIN
		-- Email is in use already; invalid request
		RAISERROR('That email is already in use by another account.', 18, 1);
		RETURN;
	END
	ELSE
	BEGIN
		-- User details check out; create new record
		INSERT INTO [SiteUser]
		(
			[FirstName],
			[LastName],
			[Email],
			[ResetToken],
			[IsAdmin]
		) VALUES
		(
			@FirstName,
			@LastName,
			@Email,
			NEWID(),
			@IsAdmin
		);

		SELECT
			[Id],
			[ResetToken]
		FROM [SiteUser]
		WHERE
			[Id] = SCOPE_IDENTITY()
			;
	END
END
GO
PRINT N'Creating Procedure [dbo].[SiteUser_RequestReset]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Jan. 26, 2022
-- Description:	Allows a user to request a password reset email
-- =============================================
CREATE PROCEDURE [dbo].[SiteUser_RequestReset]
	-- Add the parameters for the stored procedure here
	@Email NVARCHAR(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Attempt to find the user with the right email
	DECLARE @ResetUser INT =
	(
		SELECT TOP 1 [Id] FROM [SiteUser]
		WHERE [Email] = @Email
	);

	IF (@ResetUser IS NOT NULL)
	BEGIN
		-- Create new token if the user exists
		UPDATE [SiteUser]
		SET
			[ResetToken] = NEWID(),
			[PasswordHash] = NULL
		WHERE
			[Id] = @ResetUser
			;

		SELECT [ResetToken] FROM [SiteUser]
		WHERE [Id] =  @ResetUser;
	END

	-- Fail silently to avoid security problems/data leaks!
	-- Do not leak whether or not an account exists.
END
GO
PRINT N'Creating Procedure [dbo].[SiteUser_ResetPassword]...';


GO
-- =============================================
-- Author:		Zach Goethel
-- Create date: Jan. 26, 2022
-- Description:	Allows a user to (re)set their password via an email link
-- =============================================
CREATE PROCEDURE [dbo].[SiteUser_ResetPassword]
	-- Add the parameters for the stored procedure here
	@ResetToken UNIQUEIDENTIFIER,
	@PasswordHash NVARCHAR(100)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @ResetUser INT =
	(
		SELECT TOP 1 [Id] FROM [SiteUser]
		WHERE [ResetToken] = @ResetToken
	);

	IF (@ResetUser IS NULL)
	BEGIN
		RAISERROR('Could not find provided token. Please try again.', 18, 1);
		RETURN;
	END
	ELSE
	BEGIN
		UPDATE [SiteUser]
		SET
			[ResetToken] = NULL,
			[PasswordHash] = @PasswordHash
		WHERE
			[Id] = @ResetUser
			;
	END
END
GO
PRINT N'Update complete.';


GO
